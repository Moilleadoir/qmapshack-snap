/**********************************************************************************************
 Copyright (C) 2014 Oliver Eichler oliver.eichler@gmx.de

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 **********************************************************************************************/

#include "gis/fit/defs/CFitProfileLockup.h"
#include "gis/fit/defs/CFitBaseType.h"
#include "gis/fit/defs/fit_enums.h"
#include "gis/fit/defs/fit_const.h"
#include "fit_fields.h"

QMap<uint16_t, CFitProfile*>  initProfiles()
{
    QMap<uint16_t, CFitProfile*> profiles;
// ----------- start generated code -----------

    profiles[MesgNumFileId] = new CFitProfile("file_id", MesgNumFileId);
    profiles[MesgNumFileId]->addField(new CFitFieldProfile("type", &EnumType, FileIdType, 0, 0, ""));
    profiles[MesgNumFileId]->addField(new CFitFieldProfile("manufacturer", &EnumType, FileIdManufacturer, 0, 0, ""));
    profiles[MesgNumFileId]->addField(new CFitFieldProfile("product", &Uint16Type, FileIdProduct, 0, 0, ""));
    profiles[MesgNumFileId]->getField(FileIdProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, FileIdProduct, 0, 0, "", FileIdManufacturer, ManufacturerGarmin));
    profiles[MesgNumFileId]->getField(FileIdProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, FileIdProduct, 0, 0, "", FileIdManufacturer, ManufacturerDynastream));
    profiles[MesgNumFileId]->getField(FileIdProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, FileIdProduct, 0, 0, "", FileIdManufacturer, ManufacturerDynastreamOem));
    profiles[MesgNumFileId]->addField(new CFitFieldProfile("serial_number", &Uint32zType, FileIdSerialNumber, 0, 0, ""));
    profiles[MesgNumFileId]->addField(new CFitFieldProfile("time_created", &EnumType, FileIdTimeCreated, 0, 0, ""));
    profiles[MesgNumFileId]->addField(new CFitFieldProfile("number", &Uint16Type, FileIdNumber, 0, 0, ""));
    profiles[MesgNumFileId]->addField(new CFitFieldProfile("product_name", &StringType, FileIdProductName, 0, 0, ""));

    profiles[MesgNumFileCreator] = new CFitProfile("file_creator", MesgNumFileCreator);
    profiles[MesgNumFileCreator]->addField(new CFitFieldProfile("software_version", &Uint16Type, FileCreatorSoftwareVersion, 0, 0, ""));
    profiles[MesgNumFileCreator]->addField(new CFitFieldProfile("hardware_version", &Uint8Type, FileCreatorHardwareVersion, 0, 0, ""));

    profiles[MesgNumTimestampCorrelation] = new CFitProfile("timestamp_correlation", MesgNumTimestampCorrelation);
    profiles[MesgNumTimestampCorrelation]->addField(new CFitFieldProfile("timestamp", &EnumType, TimestampCorrelationTimestamp, 0, 0, "s"));
    profiles[MesgNumTimestampCorrelation]->addField(new CFitFieldProfile("fractional_timestamp", &Uint16Type, TimestampCorrelationFractionalTimestamp, 32768, 0, "s"));
    profiles[MesgNumTimestampCorrelation]->addField(new CFitFieldProfile("system_timestamp", &EnumType, TimestampCorrelationSystemTimestamp, 0, 0, "s"));
    profiles[MesgNumTimestampCorrelation]->addField(new CFitFieldProfile("fractional_system_timestamp", &Uint16Type, TimestampCorrelationFractionalSystemTimestamp, 32768, 0, "s"));
    profiles[MesgNumTimestampCorrelation]->addField(new CFitFieldProfile("local_timestamp", &EnumType, TimestampCorrelationLocalTimestamp, 0, 0, "s"));
    profiles[MesgNumTimestampCorrelation]->addField(new CFitFieldProfile("timestamp_ms", &Uint16Type, TimestampCorrelationTimestampMs, 0, 0, "ms"));
    profiles[MesgNumTimestampCorrelation]->addField(new CFitFieldProfile("system_timestamp_ms", &Uint16Type, TimestampCorrelationSystemTimestampMs, 0, 0, "ms"));

    profiles[MesgNumSoftware] = new CFitProfile("software", MesgNumSoftware);
    profiles[MesgNumSoftware]->addField(new CFitFieldProfile("message_index", &EnumType, SoftwareMessageIndex, 0, 0, ""));
    profiles[MesgNumSoftware]->addField(new CFitFieldProfile("version", &Uint16Type, SoftwareVersion, 100, 0, ""));
    profiles[MesgNumSoftware]->addField(new CFitFieldProfile("part_number", &StringType, SoftwarePartNumber, 0, 0, ""));

    profiles[MesgNumSlaveDevice] = new CFitProfile("slave_device", MesgNumSlaveDevice);
    profiles[MesgNumSlaveDevice]->addField(new CFitFieldProfile("manufacturer", &EnumType, SlaveDeviceManufacturer, 0, 0, ""));
    profiles[MesgNumSlaveDevice]->addField(new CFitFieldProfile("product", &Uint16Type, SlaveDeviceProduct, 0, 0, ""));
    profiles[MesgNumSlaveDevice]->getField(SlaveDeviceProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, SlaveDeviceProduct, 0, 0, "", SlaveDeviceManufacturer, ManufacturerGarmin));
    profiles[MesgNumSlaveDevice]->getField(SlaveDeviceProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, SlaveDeviceProduct, 0, 0, "", SlaveDeviceManufacturer, ManufacturerDynastream));
    profiles[MesgNumSlaveDevice]->getField(SlaveDeviceProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, SlaveDeviceProduct, 0, 0, "", SlaveDeviceManufacturer, ManufacturerDynastreamOem));

    profiles[MesgNumCapabilities] = new CFitProfile("capabilities", MesgNumCapabilities);
    profiles[MesgNumCapabilities]->addField(new CFitFieldProfile("languages", &Uint8zType, CapabilitiesLanguages, 0, 0, ""));
    profiles[MesgNumCapabilities]->addField(new CFitFieldProfile("sports", &EnumType, CapabilitiesSports, 0, 0, ""));
    profiles[MesgNumCapabilities]->addField(new CFitFieldProfile("workouts_supported", &EnumType, CapabilitiesWorkoutsSupported, 0, 0, ""));
    profiles[MesgNumCapabilities]->addField(new CFitFieldProfile("connectivity_supported", &EnumType, CapabilitiesConnectivitySupported, 0, 0, ""));

    profiles[MesgNumFileCapabilities] = new CFitProfile("file_capabilities", MesgNumFileCapabilities);
    profiles[MesgNumFileCapabilities]->addField(new CFitFieldProfile("message_index", &EnumType, FileCapabilitiesMessageIndex, 0, 0, ""));
    profiles[MesgNumFileCapabilities]->addField(new CFitFieldProfile("type", &EnumType, FileCapabilitiesType, 0, 0, ""));
    profiles[MesgNumFileCapabilities]->addField(new CFitFieldProfile("flags", &EnumType, FileCapabilitiesFlags, 0, 0, ""));
    profiles[MesgNumFileCapabilities]->addField(new CFitFieldProfile("directory", &StringType, FileCapabilitiesDirectory, 0, 0, ""));
    profiles[MesgNumFileCapabilities]->addField(new CFitFieldProfile("max_count", &Uint16Type, FileCapabilitiesMaxCount, 0, 0, ""));
    profiles[MesgNumFileCapabilities]->addField(new CFitFieldProfile("max_size", &Uint32Type, FileCapabilitiesMaxSize, 0, 0, "bytes"));

    profiles[MesgNumMesgCapabilities] = new CFitProfile("mesg_capabilities", MesgNumMesgCapabilities);
    profiles[MesgNumMesgCapabilities]->addField(new CFitFieldProfile("message_index", &EnumType, MesgCapabilitiesMessageIndex, 0, 0, ""));
    profiles[MesgNumMesgCapabilities]->addField(new CFitFieldProfile("file", &EnumType, MesgCapabilitiesFile, 0, 0, ""));
    profiles[MesgNumMesgCapabilities]->addField(new CFitFieldProfile("mesg_num", &EnumType, MesgCapabilitiesMesgNum, 0, 0, ""));
    profiles[MesgNumMesgCapabilities]->addField(new CFitFieldProfile("count_type", &EnumType, MesgCapabilitiesCountType, 0, 0, ""));
    profiles[MesgNumMesgCapabilities]->addField(new CFitFieldProfile("count", &Uint16Type, MesgCapabilitiesCount, 0, 0, ""));
    profiles[MesgNumMesgCapabilities]->getField(MesgCapabilitiesCount)->addSubfield(new CFitSubfieldProfile("num_per_file", &Uint16Type, MesgCapabilitiesCount, 0, 0, "", MesgCapabilitiesCountType, MesgCountNumPerFile));
    profiles[MesgNumMesgCapabilities]->getField(MesgCapabilitiesCount)->addSubfield(new CFitSubfieldProfile("max_per_file", &Uint16Type, MesgCapabilitiesCount, 0, 0, "", MesgCapabilitiesCountType, MesgCountMaxPerFile));
    profiles[MesgNumMesgCapabilities]->getField(MesgCapabilitiesCount)->addSubfield(new CFitSubfieldProfile("max_per_file_type", &Uint16Type, MesgCapabilitiesCount, 0, 0, "", MesgCapabilitiesCountType, MesgCountMaxPerFileType));

    profiles[MesgNumFieldCapabilities] = new CFitProfile("field_capabilities", MesgNumFieldCapabilities);
    profiles[MesgNumFieldCapabilities]->addField(new CFitFieldProfile("message_index", &EnumType, FieldCapabilitiesMessageIndex, 0, 0, ""));
    profiles[MesgNumFieldCapabilities]->addField(new CFitFieldProfile("file", &EnumType, FieldCapabilitiesFile, 0, 0, ""));
    profiles[MesgNumFieldCapabilities]->addField(new CFitFieldProfile("mesg_num", &EnumType, FieldCapabilitiesMesgNum, 0, 0, ""));
    profiles[MesgNumFieldCapabilities]->addField(new CFitFieldProfile("field_num", &Uint8Type, FieldCapabilitiesFieldNum, 0, 0, ""));
    profiles[MesgNumFieldCapabilities]->addField(new CFitFieldProfile("count", &Uint16Type, FieldCapabilitiesCount, 0, 0, ""));

    profiles[MesgNumDeviceSettings] = new CFitProfile("device_settings", MesgNumDeviceSettings);
    profiles[MesgNumDeviceSettings]->addField(new CFitFieldProfile("active_time_zone", &Uint8Type, DeviceSettingsActiveTimeZone, 0, 0, ""));
    profiles[MesgNumDeviceSettings]->addField(new CFitFieldProfile("utc_offset", &Uint32Type, DeviceSettingsUtcOffset, 0, 0, ""));
    profiles[MesgNumDeviceSettings]->addField(new CFitFieldProfile("time_zone_offset", &Sint8Type, DeviceSettingsTimeZoneOffset, 4, 0, "hr"));

    profiles[MesgNumUserProfile] = new CFitProfile("user_profile", MesgNumUserProfile);
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("message_index", &EnumType, UserProfileMessageIndex, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("friendly_name", &StringType, UserProfileFriendlyName, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("gender", &EnumType, UserProfileGender, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("age", &Uint8Type, UserProfileAge, 0, 0, "years"));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("height", &Uint8Type, UserProfileHeight, 100, 0, "m"));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("weight", &Uint16Type, UserProfileWeight, 10, 0, "kg"));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("language", &EnumType, UserProfileLanguage, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("elev_setting", &EnumType, UserProfileElevSetting, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("weight_setting", &EnumType, UserProfileWeightSetting, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("resting_heart_rate", &Uint8Type, UserProfileRestingHeartRate, 0, 0, "bpm"));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("default_max_running_heart_rate", &Uint8Type, UserProfileDefaultMaxRunningHeartRate, 0, 0, "bpm"));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("default_max_biking_heart_rate", &Uint8Type, UserProfileDefaultMaxBikingHeartRate, 0, 0, "bpm"));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("default_max_heart_rate", &Uint8Type, UserProfileDefaultMaxHeartRate, 0, 0, "bpm"));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("hr_setting", &EnumType, UserProfileHrSetting, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("speed_setting", &EnumType, UserProfileSpeedSetting, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("dist_setting", &EnumType, UserProfileDistSetting, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("power_setting", &EnumType, UserProfilePowerSetting, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("activity_class", &EnumType, UserProfileActivityClass, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("position_setting", &EnumType, UserProfilePositionSetting, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("temperature_setting", &EnumType, UserProfileTemperatureSetting, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("local_id", &EnumType, UserProfileLocalId, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("global_id", &ByteType, UserProfileGlobalId, 0, 0, ""));
    profiles[MesgNumUserProfile]->addField(new CFitFieldProfile("height_setting", &EnumType, UserProfileHeightSetting, 0, 0, ""));

    profiles[MesgNumHrmProfile] = new CFitProfile("hrm_profile", MesgNumHrmProfile);
    profiles[MesgNumHrmProfile]->addField(new CFitFieldProfile("message_index", &EnumType, HrmProfileMessageIndex, 0, 0, ""));
    profiles[MesgNumHrmProfile]->addField(new CFitFieldProfile("enabled", &EnumType, HrmProfileEnabled, 0, 0, ""));
    profiles[MesgNumHrmProfile]->addField(new CFitFieldProfile("hrm_ant_id", &Uint16zType, HrmProfileHrmAntId, 0, 0, ""));
    profiles[MesgNumHrmProfile]->addField(new CFitFieldProfile("log_hrv", &EnumType, HrmProfileLogHrv, 0, 0, ""));
    profiles[MesgNumHrmProfile]->addField(new CFitFieldProfile("hrm_ant_id_trans_type", &Uint8zType, HrmProfileHrmAntIdTransType, 0, 0, ""));

    profiles[MesgNumSdmProfile] = new CFitProfile("sdm_profile", MesgNumSdmProfile);
    profiles[MesgNumSdmProfile]->addField(new CFitFieldProfile("message_index", &EnumType, SdmProfileMessageIndex, 0, 0, ""));
    profiles[MesgNumSdmProfile]->addField(new CFitFieldProfile("enabled", &EnumType, SdmProfileEnabled, 0, 0, ""));
    profiles[MesgNumSdmProfile]->addField(new CFitFieldProfile("sdm_ant_id", &Uint16zType, SdmProfileSdmAntId, 0, 0, ""));
    profiles[MesgNumSdmProfile]->addField(new CFitFieldProfile("sdm_cal_factor", &Uint16Type, SdmProfileSdmCalFactor, 10, 0, "%"));
    profiles[MesgNumSdmProfile]->addField(new CFitFieldProfile("odometer", &Uint32Type, SdmProfileOdometer, 100, 0, "m"));
    profiles[MesgNumSdmProfile]->addField(new CFitFieldProfile("speed_source", &EnumType, SdmProfileSpeedSource, 0, 0, ""));
    profiles[MesgNumSdmProfile]->addField(new CFitFieldProfile("sdm_ant_id_trans_type", &Uint8zType, SdmProfileSdmAntIdTransType, 0, 0, ""));
    profiles[MesgNumSdmProfile]->addField(new CFitFieldProfile("odometer_rollover", &Uint8Type, SdmProfileOdometerRollover, 0, 0, ""));

    profiles[MesgNumBikeProfile] = new CFitProfile("bike_profile", MesgNumBikeProfile);
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("message_index", &EnumType, BikeProfileMessageIndex, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("name", &StringType, BikeProfileName, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("sport", &EnumType, BikeProfileSport, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("sub_sport", &EnumType, BikeProfileSubSport, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("odometer", &Uint32Type, BikeProfileOdometer, 100, 0, "m"));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("bike_spd_ant_id", &Uint16zType, BikeProfileBikeSpdAntId, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("bike_cad_ant_id", &Uint16zType, BikeProfileBikeCadAntId, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("bike_spdcad_ant_id", &Uint16zType, BikeProfileBikeSpdcadAntId, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("bike_power_ant_id", &Uint16zType, BikeProfileBikePowerAntId, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("custom_wheelsize", &Uint16Type, BikeProfileCustomWheelsize, 1000, 0, "m"));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("auto_wheelsize", &Uint16Type, BikeProfileAutoWheelsize, 1000, 0, "m"));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("bike_weight", &Uint16Type, BikeProfileBikeWeight, 10, 0, "kg"));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("power_cal_factor", &Uint16Type, BikeProfilePowerCalFactor, 10, 0, "%"));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("auto_wheel_cal", &EnumType, BikeProfileAutoWheelCal, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("auto_power_zero", &EnumType, BikeProfileAutoPowerZero, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("id", &Uint8Type, BikeProfileId, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("spd_enabled", &EnumType, BikeProfileSpdEnabled, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("cad_enabled", &EnumType, BikeProfileCadEnabled, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("spdcad_enabled", &EnumType, BikeProfileSpdcadEnabled, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("power_enabled", &EnumType, BikeProfilePowerEnabled, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("crank_length", &Uint8Type, BikeProfileCrankLength, 2, -110, "mm"));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("enabled", &EnumType, BikeProfileEnabled, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("bike_spd_ant_id_trans_type", &Uint8zType, BikeProfileBikeSpdAntIdTransType, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("bike_cad_ant_id_trans_type", &Uint8zType, BikeProfileBikeCadAntIdTransType, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("bike_spdcad_ant_id_trans_type", &Uint8zType, BikeProfileBikeSpdcadAntIdTransType, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("bike_power_ant_id_trans_type", &Uint8zType, BikeProfileBikePowerAntIdTransType, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("odometer_rollover", &Uint8Type, BikeProfileOdometerRollover, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("front_gear_num", &Uint8zType, BikeProfileFrontGearNum, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("front_gear", &Uint8zType, BikeProfileFrontGear, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("rear_gear_num", &Uint8zType, BikeProfileRearGearNum, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("rear_gear", &Uint8zType, BikeProfileRearGear, 0, 0, ""));
    profiles[MesgNumBikeProfile]->addField(new CFitFieldProfile("shimano_di2_enabled", &EnumType, BikeProfileShimanoDi2Enabled, 0, 0, ""));

    profiles[MesgNumZonesTarget] = new CFitProfile("zones_target", MesgNumZonesTarget);
    profiles[MesgNumZonesTarget]->addField(new CFitFieldProfile("max_heart_rate", &Uint8Type, ZonesTargetMaxHeartRate, 0, 0, ""));
    profiles[MesgNumZonesTarget]->addField(new CFitFieldProfile("threshold_heart_rate", &Uint8Type, ZonesTargetThresholdHeartRate, 0, 0, ""));
    profiles[MesgNumZonesTarget]->addField(new CFitFieldProfile("functional_threshold_power", &Uint16Type, ZonesTargetFunctionalThresholdPower, 0, 0, ""));
    profiles[MesgNumZonesTarget]->addField(new CFitFieldProfile("hr_calc_type", &EnumType, ZonesTargetHrCalcType, 0, 0, ""));
    profiles[MesgNumZonesTarget]->addField(new CFitFieldProfile("pwr_calc_type", &EnumType, ZonesTargetPwrCalcType, 0, 0, ""));

    profiles[MesgNumSport] = new CFitProfile("sport", MesgNumSport);
    profiles[MesgNumSport]->addField(new CFitFieldProfile("sport", &EnumType, SportSport, 0, 0, ""));
    profiles[MesgNumSport]->addField(new CFitFieldProfile("sub_sport", &EnumType, SportSubSport, 0, 0, ""));
    profiles[MesgNumSport]->addField(new CFitFieldProfile("name", &StringType, SportName, 0, 0, ""));

    profiles[MesgNumHrZone] = new CFitProfile("hr_zone", MesgNumHrZone);
    profiles[MesgNumHrZone]->addField(new CFitFieldProfile("message_index", &EnumType, HrZoneMessageIndex, 0, 0, ""));
    profiles[MesgNumHrZone]->addField(new CFitFieldProfile("high_bpm", &Uint8Type, HrZoneHighBpm, 0, 0, "bpm"));
    profiles[MesgNumHrZone]->addField(new CFitFieldProfile("name", &StringType, HrZoneName, 0, 0, ""));

    profiles[MesgNumSpeedZone] = new CFitProfile("speed_zone", MesgNumSpeedZone);
    profiles[MesgNumSpeedZone]->addField(new CFitFieldProfile("message_index", &EnumType, SpeedZoneMessageIndex, 0, 0, ""));
    profiles[MesgNumSpeedZone]->addField(new CFitFieldProfile("high_value", &Uint16Type, SpeedZoneHighValue, 1000, 0, "m/s"));
    profiles[MesgNumSpeedZone]->addField(new CFitFieldProfile("name", &StringType, SpeedZoneName, 0, 0, ""));

    profiles[MesgNumCadenceZone] = new CFitProfile("cadence_zone", MesgNumCadenceZone);
    profiles[MesgNumCadenceZone]->addField(new CFitFieldProfile("message_index", &EnumType, CadenceZoneMessageIndex, 0, 0, ""));
    profiles[MesgNumCadenceZone]->addField(new CFitFieldProfile("high_value", &Uint8Type, CadenceZoneHighValue, 0, 0, "rpm"));
    profiles[MesgNumCadenceZone]->addField(new CFitFieldProfile("name", &StringType, CadenceZoneName, 0, 0, ""));

    profiles[MesgNumPowerZone] = new CFitProfile("power_zone", MesgNumPowerZone);
    profiles[MesgNumPowerZone]->addField(new CFitFieldProfile("message_index", &EnumType, PowerZoneMessageIndex, 0, 0, ""));
    profiles[MesgNumPowerZone]->addField(new CFitFieldProfile("high_value", &Uint16Type, PowerZoneHighValue, 0, 0, "watts"));
    profiles[MesgNumPowerZone]->addField(new CFitFieldProfile("name", &StringType, PowerZoneName, 0, 0, ""));

    profiles[MesgNumMetZone] = new CFitProfile("met_zone", MesgNumMetZone);
    profiles[MesgNumMetZone]->addField(new CFitFieldProfile("message_index", &EnumType, MetZoneMessageIndex, 0, 0, ""));
    profiles[MesgNumMetZone]->addField(new CFitFieldProfile("high_bpm", &Uint8Type, MetZoneHighBpm, 0, 0, ""));
    profiles[MesgNumMetZone]->addField(new CFitFieldProfile("calories", &Uint16Type, MetZoneCalories, 10, 0, "kcal / min"));
    profiles[MesgNumMetZone]->addField(new CFitFieldProfile("fat_calories", &Uint8Type, MetZoneFatCalories, 10, 0, "kcal / min"));

    profiles[MesgNumGoal] = new CFitProfile("goal", MesgNumGoal);
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("message_index", &EnumType, GoalMessageIndex, 0, 0, ""));
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("sport", &EnumType, GoalSport, 0, 0, ""));
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("sub_sport", &EnumType, GoalSubSport, 0, 0, ""));
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("start_date", &EnumType, GoalStartDate, 0, 0, ""));
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("end_date", &EnumType, GoalEndDate, 0, 0, ""));
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("type", &EnumType, GoalType, 0, 0, ""));
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("value", &Uint32Type, GoalValue, 0, 0, ""));
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("repeat", &EnumType, GoalRepeat, 0, 0, ""));
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("target_value", &Uint32Type, GoalTargetValue, 0, 0, ""));
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("recurrence", &EnumType, GoalRecurrence, 0, 0, ""));
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("recurrence_value", &Uint16Type, GoalRecurrenceValue, 0, 0, ""));
    profiles[MesgNumGoal]->addField(new CFitFieldProfile("enabled", &EnumType, GoalEnabled, 0, 0, ""));

    profiles[MesgNumActivity] = new CFitProfile("activity", MesgNumActivity);
    profiles[MesgNumActivity]->addField(new CFitFieldProfile("timestamp", &EnumType, ActivityTimestamp, 0, 0, ""));
    profiles[MesgNumActivity]->addField(new CFitFieldProfile("total_timer_time", &Uint32Type, ActivityTotalTimerTime, 1000, 0, "s"));
    profiles[MesgNumActivity]->addField(new CFitFieldProfile("num_sessions", &Uint16Type, ActivityNumSessions, 0, 0, ""));
    profiles[MesgNumActivity]->addField(new CFitFieldProfile("type", &EnumType, ActivityType, 0, 0, ""));
    profiles[MesgNumActivity]->addField(new CFitFieldProfile("event", &EnumType, ActivityEvent, 0, 0, ""));
    profiles[MesgNumActivity]->addField(new CFitFieldProfile("event_type", &EnumType, ActivityEventType, 0, 0, ""));
    profiles[MesgNumActivity]->addField(new CFitFieldProfile("local_timestamp", &EnumType, ActivityLocalTimestamp, 0, 0, ""));
    profiles[MesgNumActivity]->addField(new CFitFieldProfile("event_group", &Uint8Type, ActivityEventGroup, 0, 0, ""));

    profiles[MesgNumSession] = new CFitProfile("session", MesgNumSession);
    profiles[MesgNumSession]->addField(new CFitFieldProfile("message_index", &EnumType, SessionMessageIndex, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("timestamp", &EnumType, SessionTimestamp, 0, 0, "s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("event", &EnumType, SessionEvent, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("event_type", &EnumType, SessionEventType, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("start_time", &EnumType, SessionStartTime, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("start_position_lat", &Sint32Type, SessionStartPositionLat, 0, 0, "semicircles"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("start_position_long", &Sint32Type, SessionStartPositionLong, 0, 0, "semicircles"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("sport", &EnumType, SessionSport, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("sub_sport", &EnumType, SessionSubSport, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_elapsed_time", &Uint32Type, SessionTotalElapsedTime, 1000, 0, "s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_timer_time", &Uint32Type, SessionTotalTimerTime, 1000, 0, "s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_distance", &Uint32Type, SessionTotalDistance, 100, 0, "m"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_cycles", &Uint32Type, SessionTotalCycles, 0, 0, "cycles"));
    profiles[MesgNumSession]->getField(SessionTotalCycles)->addSubfield(new CFitSubfieldProfile("total_strides", &Uint32Type, SessionTotalCycles, 0, 0, "strides", SessionSport, SportRunning));
    profiles[MesgNumSession]->getField(SessionTotalCycles)->addSubfield(new CFitSubfieldProfile("total_strides", &Uint32Type, SessionTotalCycles, 0, 0, "", SessionSport, SportWalking));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_calories", &Uint16Type, SessionTotalCalories, 0, 0, "kcal"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_fat_calories", &Uint16Type, SessionTotalFatCalories, 0, 0, "kcal"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_speed", &Uint16Type, SessionAvgSpeed, 0, 0, ""));
    profiles[MesgNumSession]->getField(SessionAvgSpeed)->addComponent(new CFitComponentfieldProfile("avg_speed", &Uint16Type, SessionAvgSpeed, 1000, 0, "m/s", SessionEnhancedAvgSpeed, 16));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_speed", &Uint16Type, SessionMaxSpeed, 0, 0, ""));
    profiles[MesgNumSession]->getField(SessionMaxSpeed)->addComponent(new CFitComponentfieldProfile("max_speed", &Uint16Type, SessionMaxSpeed, 1000, 0, "m/s", SessionEnhancedMaxSpeed, 16));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_heart_rate", &Uint8Type, SessionAvgHeartRate, 0, 0, "bpm"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_heart_rate", &Uint8Type, SessionMaxHeartRate, 0, 0, "bpm"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_cadence", &Uint8Type, SessionAvgCadence, 0, 0, "rpm"));
    profiles[MesgNumSession]->getField(SessionAvgCadence)->addSubfield(new CFitSubfieldProfile("avg_running_cadence", &Uint8Type, SessionAvgCadence, 0, 0, "strides/min", SessionSport, SportRunning));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_cadence", &Uint8Type, SessionMaxCadence, 0, 0, "rpm"));
    profiles[MesgNumSession]->getField(SessionMaxCadence)->addSubfield(new CFitSubfieldProfile("max_running_cadence", &Uint8Type, SessionMaxCadence, 0, 0, "strides/min", SessionSport, SportRunning));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_power", &Uint16Type, SessionAvgPower, 0, 0, "watts"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_power", &Uint16Type, SessionMaxPower, 0, 0, "watts"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_ascent", &Uint16Type, SessionTotalAscent, 0, 0, "m"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_descent", &Uint16Type, SessionTotalDescent, 0, 0, "m"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_training_effect", &Uint8Type, SessionTotalTrainingEffect, 10, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("first_lap_index", &Uint16Type, SessionFirstLapIndex, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("num_laps", &Uint16Type, SessionNumLaps, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("event_group", &Uint8Type, SessionEventGroup, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("trigger", &EnumType, SessionTrigger, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("nec_lat", &Sint32Type, SessionNecLat, 0, 0, "semicircles"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("nec_long", &Sint32Type, SessionNecLong, 0, 0, "semicircles"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("swc_lat", &Sint32Type, SessionSwcLat, 0, 0, "semicircles"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("swc_long", &Sint32Type, SessionSwcLong, 0, 0, "semicircles"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("normalized_power", &Uint16Type, SessionNormalizedPower, 0, 0, "watts"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("training_stress_score", &Uint16Type, SessionTrainingStressScore, 10, 0, "tss"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("intensity_factor", &Uint16Type, SessionIntensityFactor, 1000, 0, "if"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("left_right_balance", &EnumType, SessionLeftRightBalance, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_stroke_count", &Uint32Type, SessionAvgStrokeCount, 10, 0, "strokes/lap"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_stroke_distance", &Uint16Type, SessionAvgStrokeDistance, 100, 0, "m"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("swim_stroke", &EnumType, SessionSwimStroke, 0, 0, "swim_stroke"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("pool_length", &Uint16Type, SessionPoolLength, 100, 0, "m"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("threshold_power", &Uint16Type, SessionThresholdPower, 0, 0, "watts"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("pool_length_unit", &EnumType, SessionPoolLengthUnit, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("num_active_lengths", &Uint16Type, SessionNumActiveLengths, 0, 0, "lengths"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_work", &Uint32Type, SessionTotalWork, 0, 0, "J"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_altitude", &Uint16Type, SessionAvgAltitude, 0, 0, ""));
    profiles[MesgNumSession]->getField(SessionAvgAltitude)->addComponent(new CFitComponentfieldProfile("avg_altitude", &Uint16Type, SessionAvgAltitude, 5, 500, "m", SessionEnhancedAvgAltitude, 16));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_altitude", &Uint16Type, SessionMaxAltitude, 0, 0, ""));
    profiles[MesgNumSession]->getField(SessionMaxAltitude)->addComponent(new CFitComponentfieldProfile("max_altitude", &Uint16Type, SessionMaxAltitude, 5, 500, "m", SessionEnhancedMaxAltitude, 16));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("gps_accuracy", &Uint8Type, SessionGpsAccuracy, 0, 0, "m"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_grade", &Sint16Type, SessionAvgGrade, 100, 0, "%"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_pos_grade", &Sint16Type, SessionAvgPosGrade, 100, 0, "%"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_neg_grade", &Sint16Type, SessionAvgNegGrade, 100, 0, "%"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_pos_grade", &Sint16Type, SessionMaxPosGrade, 100, 0, "%"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_neg_grade", &Sint16Type, SessionMaxNegGrade, 100, 0, "%"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_temperature", &Sint8Type, SessionAvgTemperature, 0, 0, "C"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_temperature", &Sint8Type, SessionMaxTemperature, 0, 0, "C"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_moving_time", &Uint32Type, SessionTotalMovingTime, 1000, 0, "s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_pos_vertical_speed", &Sint16Type, SessionAvgPosVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_neg_vertical_speed", &Sint16Type, SessionAvgNegVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_pos_vertical_speed", &Sint16Type, SessionMaxPosVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_neg_vertical_speed", &Sint16Type, SessionMaxNegVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("min_heart_rate", &Uint8Type, SessionMinHeartRate, 0, 0, "bpm"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("time_in_hr_zone", &Uint32Type, SessionTimeInHrZone, 1000, 0, "s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("time_in_speed_zone", &Uint32Type, SessionTimeInSpeedZone, 1000, 0, "s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("time_in_cadence_zone", &Uint32Type, SessionTimeInCadenceZone, 1000, 0, "s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("time_in_power_zone", &Uint32Type, SessionTimeInPowerZone, 1000, 0, "s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_lap_time", &Uint32Type, SessionAvgLapTime, 1000, 0, "s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("best_lap_index", &Uint16Type, SessionBestLapIndex, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("min_altitude", &Uint16Type, SessionMinAltitude, 0, 0, ""));
    profiles[MesgNumSession]->getField(SessionMinAltitude)->addComponent(new CFitComponentfieldProfile("min_altitude", &Uint16Type, SessionMinAltitude, 5, 500, "m", SessionEnhancedMinAltitude, 16));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("player_score", &Uint16Type, SessionPlayerScore, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("opponent_score", &Uint16Type, SessionOpponentScore, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("opponent_name", &StringType, SessionOpponentName, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("stroke_count", &Uint16Type, SessionStrokeCount, 0, 0, "counts"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("zone_count", &Uint16Type, SessionZoneCount, 0, 0, "counts"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_ball_speed", &Uint16Type, SessionMaxBallSpeed, 100, 0, "m/s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_ball_speed", &Uint16Type, SessionAvgBallSpeed, 100, 0, "m/s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_vertical_oscillation", &Uint16Type, SessionAvgVerticalOscillation, 10, 0, "mm"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_stance_time_percent", &Uint16Type, SessionAvgStanceTimePercent, 100, 0, "percent"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_stance_time", &Uint16Type, SessionAvgStanceTime, 10, 0, "ms"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_fractional_cadence", &Uint8Type, SessionAvgFractionalCadence, 128, 0, "rpm"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_fractional_cadence", &Uint8Type, SessionMaxFractionalCadence, 128, 0, "rpm"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("total_fractional_cycles", &Uint8Type, SessionTotalFractionalCycles, 128, 0, "cycles"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_total_hemoglobin_conc", &Uint16Type, SessionAvgTotalHemoglobinConc, 100, 0, "g/dL"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("min_total_hemoglobin_conc", &Uint16Type, SessionMinTotalHemoglobinConc, 100, 0, "g/dL"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_total_hemoglobin_conc", &Uint16Type, SessionMaxTotalHemoglobinConc, 100, 0, "g/dL"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_saturated_hemoglobin_percent", &Uint16Type, SessionAvgSaturatedHemoglobinPercent, 10, 0, "%"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("min_saturated_hemoglobin_percent", &Uint16Type, SessionMinSaturatedHemoglobinPercent, 10, 0, "%"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_saturated_hemoglobin_percent", &Uint16Type, SessionMaxSaturatedHemoglobinPercent, 10, 0, "%"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_left_torque_effectiveness", &Uint8Type, SessionAvgLeftTorqueEffectiveness, 2, 0, "percent"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_right_torque_effectiveness", &Uint8Type, SessionAvgRightTorqueEffectiveness, 2, 0, "percent"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_left_pedal_smoothness", &Uint8Type, SessionAvgLeftPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_right_pedal_smoothness", &Uint8Type, SessionAvgRightPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_combined_pedal_smoothness", &Uint8Type, SessionAvgCombinedPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("sport_index", &Uint8Type, SessionSportIndex, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("time_standing", &Uint32Type, SessionTimeStanding, 1000, 0, "s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("stand_count", &Uint16Type, SessionStandCount, 0, 0, ""));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_left_pco", &Sint8Type, SessionAvgLeftPco, 0, 0, "mm"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_right_pco", &Sint8Type, SessionAvgRightPco, 0, 0, "mm"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_left_power_phase", &Uint8Type, SessionAvgLeftPowerPhase, 0.7111111, 0, "degrees"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_left_power_phase_peak", &Uint8Type, SessionAvgLeftPowerPhasePeak, 0.7111111, 0, "degrees"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_right_power_phase", &Uint8Type, SessionAvgRightPowerPhase, 0.7111111, 0, "degrees"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_right_power_phase_peak", &Uint8Type, SessionAvgRightPowerPhasePeak, 0.7111111, 0, "degrees"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_power_position", &Uint16Type, SessionAvgPowerPosition, 0, 0, "watts"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_power_position", &Uint16Type, SessionMaxPowerPosition, 0, 0, "watts"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_cadence_position", &Uint8Type, SessionAvgCadencePosition, 0, 0, "rpm"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_cadence_position", &Uint8Type, SessionMaxCadencePosition, 0, 0, "rpm"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("enhanced_avg_speed", &Uint32Type, SessionEnhancedAvgSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("enhanced_max_speed", &Uint32Type, SessionEnhancedMaxSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("enhanced_avg_altitude", &Uint32Type, SessionEnhancedAvgAltitude, 5, 500, "m"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("enhanced_min_altitude", &Uint32Type, SessionEnhancedMinAltitude, 5, 500, "m"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("enhanced_max_altitude", &Uint32Type, SessionEnhancedMaxAltitude, 5, 500, "m"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("avg_lev_motor_power", &Uint16Type, SessionAvgLevMotorPower, 0, 0, "watts"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("max_lev_motor_power", &Uint16Type, SessionMaxLevMotorPower, 0, 0, "watts"));
    profiles[MesgNumSession]->addField(new CFitFieldProfile("lev_battery_consumption", &Uint8Type, SessionLevBatteryConsumption, 2, 0, "percent"));

    profiles[MesgNumLap] = new CFitProfile("lap", MesgNumLap);
    profiles[MesgNumLap]->addField(new CFitFieldProfile("message_index", &EnumType, LapMessageIndex, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("timestamp", &EnumType, LapTimestamp, 0, 0, "s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("event", &EnumType, LapEvent, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("event_type", &EnumType, LapEventType, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("start_time", &EnumType, LapStartTime, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("start_position_lat", &Sint32Type, LapStartPositionLat, 0, 0, "semicircles"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("start_position_long", &Sint32Type, LapStartPositionLong, 0, 0, "semicircles"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("end_position_lat", &Sint32Type, LapEndPositionLat, 0, 0, "semicircles"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("end_position_long", &Sint32Type, LapEndPositionLong, 0, 0, "semicircles"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("total_elapsed_time", &Uint32Type, LapTotalElapsedTime, 1000, 0, "s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("total_timer_time", &Uint32Type, LapTotalTimerTime, 1000, 0, "s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("total_distance", &Uint32Type, LapTotalDistance, 100, 0, "m"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("total_cycles", &Uint32Type, LapTotalCycles, 0, 0, "cycles"));
    profiles[MesgNumLap]->getField(LapTotalCycles)->addSubfield(new CFitSubfieldProfile("total_strides", &Uint32Type, LapTotalCycles, 0, 0, "strides", LapSport, SportRunning));
    profiles[MesgNumLap]->getField(LapTotalCycles)->addSubfield(new CFitSubfieldProfile("total_strides", &Uint32Type, LapTotalCycles, 0, 0, "", LapSport, SportWalking));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("total_calories", &Uint16Type, LapTotalCalories, 0, 0, "kcal"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("total_fat_calories", &Uint16Type, LapTotalFatCalories, 0, 0, "kcal"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_speed", &Uint16Type, LapAvgSpeed, 0, 0, ""));
    profiles[MesgNumLap]->getField(LapAvgSpeed)->addComponent(new CFitComponentfieldProfile("avg_speed", &Uint16Type, LapAvgSpeed, 1000, 0, "m/s", LapEnhancedAvgSpeed, 16));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_speed", &Uint16Type, LapMaxSpeed, 0, 0, ""));
    profiles[MesgNumLap]->getField(LapMaxSpeed)->addComponent(new CFitComponentfieldProfile("max_speed", &Uint16Type, LapMaxSpeed, 1000, 0, "m/s", LapEnhancedMaxSpeed, 16));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_heart_rate", &Uint8Type, LapAvgHeartRate, 0, 0, "bpm"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_heart_rate", &Uint8Type, LapMaxHeartRate, 0, 0, "bpm"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_cadence", &Uint8Type, LapAvgCadence, 0, 0, "rpm"));
    profiles[MesgNumLap]->getField(LapAvgCadence)->addSubfield(new CFitSubfieldProfile("avg_running_cadence", &Uint8Type, LapAvgCadence, 0, 0, "strides/min", LapSport, SportRunning));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_cadence", &Uint8Type, LapMaxCadence, 0, 0, "rpm"));
    profiles[MesgNumLap]->getField(LapMaxCadence)->addSubfield(new CFitSubfieldProfile("max_running_cadence", &Uint8Type, LapMaxCadence, 0, 0, "strides/min", LapSport, SportRunning));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_power", &Uint16Type, LapAvgPower, 0, 0, "watts"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_power", &Uint16Type, LapMaxPower, 0, 0, "watts"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("total_ascent", &Uint16Type, LapTotalAscent, 0, 0, "m"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("total_descent", &Uint16Type, LapTotalDescent, 0, 0, "m"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("intensity", &EnumType, LapIntensity, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("lap_trigger", &EnumType, LapLapTrigger, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("sport", &EnumType, LapSport, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("event_group", &Uint8Type, LapEventGroup, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("num_lengths", &Uint16Type, LapNumLengths, 0, 0, "lengths"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("normalized_power", &Uint16Type, LapNormalizedPower, 0, 0, "watts"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("left_right_balance", &EnumType, LapLeftRightBalance, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("first_length_index", &Uint16Type, LapFirstLengthIndex, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_stroke_distance", &Uint16Type, LapAvgStrokeDistance, 100, 0, "m"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("swim_stroke", &EnumType, LapSwimStroke, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("sub_sport", &EnumType, LapSubSport, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("num_active_lengths", &Uint16Type, LapNumActiveLengths, 0, 0, "lengths"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("total_work", &Uint32Type, LapTotalWork, 0, 0, "J"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_altitude", &Uint16Type, LapAvgAltitude, 0, 0, ""));
    profiles[MesgNumLap]->getField(LapAvgAltitude)->addComponent(new CFitComponentfieldProfile("avg_altitude", &Uint16Type, LapAvgAltitude, 5, 500, "m", LapEnhancedAvgAltitude, 16));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_altitude", &Uint16Type, LapMaxAltitude, 0, 0, ""));
    profiles[MesgNumLap]->getField(LapMaxAltitude)->addComponent(new CFitComponentfieldProfile("max_altitude", &Uint16Type, LapMaxAltitude, 5, 500, "m", LapEnhancedMaxAltitude, 16));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("gps_accuracy", &Uint8Type, LapGpsAccuracy, 0, 0, "m"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_grade", &Sint16Type, LapAvgGrade, 100, 0, "%"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_pos_grade", &Sint16Type, LapAvgPosGrade, 100, 0, "%"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_neg_grade", &Sint16Type, LapAvgNegGrade, 100, 0, "%"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_pos_grade", &Sint16Type, LapMaxPosGrade, 100, 0, "%"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_neg_grade", &Sint16Type, LapMaxNegGrade, 100, 0, "%"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_temperature", &Sint8Type, LapAvgTemperature, 0, 0, "C"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_temperature", &Sint8Type, LapMaxTemperature, 0, 0, "C"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("total_moving_time", &Uint32Type, LapTotalMovingTime, 1000, 0, "s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_pos_vertical_speed", &Sint16Type, LapAvgPosVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_neg_vertical_speed", &Sint16Type, LapAvgNegVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_pos_vertical_speed", &Sint16Type, LapMaxPosVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_neg_vertical_speed", &Sint16Type, LapMaxNegVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("time_in_hr_zone", &Uint32Type, LapTimeInHrZone, 1000, 0, "s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("time_in_speed_zone", &Uint32Type, LapTimeInSpeedZone, 1000, 0, "s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("time_in_cadence_zone", &Uint32Type, LapTimeInCadenceZone, 1000, 0, "s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("time_in_power_zone", &Uint32Type, LapTimeInPowerZone, 1000, 0, "s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("repetition_num", &Uint16Type, LapRepetitionNum, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("min_altitude", &Uint16Type, LapMinAltitude, 0, 0, ""));
    profiles[MesgNumLap]->getField(LapMinAltitude)->addComponent(new CFitComponentfieldProfile("min_altitude", &Uint16Type, LapMinAltitude, 5, 500, "m", LapEnhancedMinAltitude, 16));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("min_heart_rate", &Uint8Type, LapMinHeartRate, 0, 0, "bpm"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("wkt_step_index", &EnumType, LapWktStepIndex, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("opponent_score", &Uint16Type, LapOpponentScore, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("stroke_count", &Uint16Type, LapStrokeCount, 0, 0, "counts"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("zone_count", &Uint16Type, LapZoneCount, 0, 0, "counts"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_vertical_oscillation", &Uint16Type, LapAvgVerticalOscillation, 10, 0, "mm"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_stance_time_percent", &Uint16Type, LapAvgStanceTimePercent, 100, 0, "percent"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_stance_time", &Uint16Type, LapAvgStanceTime, 10, 0, "ms"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_fractional_cadence", &Uint8Type, LapAvgFractionalCadence, 128, 0, "rpm"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_fractional_cadence", &Uint8Type, LapMaxFractionalCadence, 128, 0, "rpm"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("total_fractional_cycles", &Uint8Type, LapTotalFractionalCycles, 128, 0, "cycles"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("player_score", &Uint16Type, LapPlayerScore, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_total_hemoglobin_conc", &Uint16Type, LapAvgTotalHemoglobinConc, 100, 0, "g/dL"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("min_total_hemoglobin_conc", &Uint16Type, LapMinTotalHemoglobinConc, 100, 0, "g/dL"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_total_hemoglobin_conc", &Uint16Type, LapMaxTotalHemoglobinConc, 100, 0, "g/dL"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_saturated_hemoglobin_percent", &Uint16Type, LapAvgSaturatedHemoglobinPercent, 10, 0, "%"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("min_saturated_hemoglobin_percent", &Uint16Type, LapMinSaturatedHemoglobinPercent, 10, 0, "%"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_saturated_hemoglobin_percent", &Uint16Type, LapMaxSaturatedHemoglobinPercent, 10, 0, "%"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_left_torque_effectiveness", &Uint8Type, LapAvgLeftTorqueEffectiveness, 2, 0, "percent"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_right_torque_effectiveness", &Uint8Type, LapAvgRightTorqueEffectiveness, 2, 0, "percent"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_left_pedal_smoothness", &Uint8Type, LapAvgLeftPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_right_pedal_smoothness", &Uint8Type, LapAvgRightPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_combined_pedal_smoothness", &Uint8Type, LapAvgCombinedPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("time_standing", &Uint32Type, LapTimeStanding, 1000, 0, "s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("stand_count", &Uint16Type, LapStandCount, 0, 0, ""));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_left_pco", &Sint8Type, LapAvgLeftPco, 0, 0, "mm"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_right_pco", &Sint8Type, LapAvgRightPco, 0, 0, "mm"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_left_power_phase", &Uint8Type, LapAvgLeftPowerPhase, 0.7111111, 0, "degrees"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_left_power_phase_peak", &Uint8Type, LapAvgLeftPowerPhasePeak, 0.7111111, 0, "degrees"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_right_power_phase", &Uint8Type, LapAvgRightPowerPhase, 0.7111111, 0, "degrees"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_right_power_phase_peak", &Uint8Type, LapAvgRightPowerPhasePeak, 0.7111111, 0, "degrees"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_power_position", &Uint16Type, LapAvgPowerPosition, 0, 0, "watts"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_power_position", &Uint16Type, LapMaxPowerPosition, 0, 0, "watts"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_cadence_position", &Uint8Type, LapAvgCadencePosition, 0, 0, "rpm"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_cadence_position", &Uint8Type, LapMaxCadencePosition, 0, 0, "rpm"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("enhanced_avg_speed", &Uint32Type, LapEnhancedAvgSpeed, 1000, 0, "m/s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("enhanced_max_speed", &Uint32Type, LapEnhancedMaxSpeed, 1000, 0, "m/s"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("enhanced_avg_altitude", &Uint32Type, LapEnhancedAvgAltitude, 5, 500, "m"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("enhanced_min_altitude", &Uint32Type, LapEnhancedMinAltitude, 5, 500, "m"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("enhanced_max_altitude", &Uint32Type, LapEnhancedMaxAltitude, 5, 500, "m"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("avg_lev_motor_power", &Uint16Type, LapAvgLevMotorPower, 0, 0, "watts"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("max_lev_motor_power", &Uint16Type, LapMaxLevMotorPower, 0, 0, "watts"));
    profiles[MesgNumLap]->addField(new CFitFieldProfile("lev_battery_consumption", &Uint8Type, LapLevBatteryConsumption, 2, 0, "percent"));

    profiles[MesgNumLength] = new CFitProfile("length", MesgNumLength);
    profiles[MesgNumLength]->addField(new CFitFieldProfile("message_index", &EnumType, LengthMessageIndex, 0, 0, ""));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("timestamp", &EnumType, LengthTimestamp, 0, 0, ""));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("event", &EnumType, LengthEvent, 0, 0, ""));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("event_type", &EnumType, LengthEventType, 0, 0, ""));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("start_time", &EnumType, LengthStartTime, 0, 0, ""));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("total_elapsed_time", &Uint32Type, LengthTotalElapsedTime, 1000, 0, "s"));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("total_timer_time", &Uint32Type, LengthTotalTimerTime, 1000, 0, "s"));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("total_strokes", &Uint16Type, LengthTotalStrokes, 0, 0, "strokes"));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("avg_speed", &Uint16Type, LengthAvgSpeed, 1000, 0, "m/s"));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("swim_stroke", &EnumType, LengthSwimStroke, 0, 0, "swim_stroke"));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("avg_swimming_cadence", &Uint8Type, LengthAvgSwimmingCadence, 0, 0, "strokes/min"));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("event_group", &Uint8Type, LengthEventGroup, 0, 0, ""));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("total_calories", &Uint16Type, LengthTotalCalories, 0, 0, "kcal"));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("length_type", &EnumType, LengthLengthType, 0, 0, ""));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("player_score", &Uint16Type, LengthPlayerScore, 0, 0, ""));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("opponent_score", &Uint16Type, LengthOpponentScore, 0, 0, ""));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("stroke_count", &Uint16Type, LengthStrokeCount, 0, 0, "counts"));
    profiles[MesgNumLength]->addField(new CFitFieldProfile("zone_count", &Uint16Type, LengthZoneCount, 0, 0, "counts"));

    profiles[MesgNumRecord] = new CFitProfile("record", MesgNumRecord);
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("timestamp", &EnumType, RecordTimestamp, 0, 0, "s"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("position_lat", &Sint32Type, RecordPositionLat, 0, 0, "semicircles"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("position_long", &Sint32Type, RecordPositionLong, 0, 0, "semicircles"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("altitude", &Uint16Type, RecordAltitude, 0, 0, ""));
    profiles[MesgNumRecord]->getField(RecordAltitude)->addComponent(new CFitComponentfieldProfile("altitude", &Uint16Type, RecordAltitude, 5, 500, "m", RecordEnhancedAltitude, 16));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("heart_rate", &Uint8Type, RecordHeartRate, 0, 0, "bpm"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("cadence", &Uint8Type, RecordCadence, 0, 0, "rpm"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("distance", &Uint32Type, RecordDistance, 100, 0, "m"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("speed", &Uint16Type, RecordSpeed, 0, 0, ""));
    profiles[MesgNumRecord]->getField(RecordSpeed)->addComponent(new CFitComponentfieldProfile("speed", &Uint16Type, RecordSpeed, 1000, 0, "m/s", RecordEnhancedSpeed, 16));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("power", &Uint16Type, RecordPower, 0, 0, "watts"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("compressed_speed_distance", &ByteType, RecordCompressedSpeedDistance, 0, 0, ""));
    profiles[MesgNumRecord]->getField(RecordCompressedSpeedDistance)->addComponent(new CFitComponentfieldProfile("compressed_speed_distance", &ByteType, RecordCompressedSpeedDistance, 100, 0, "m/s", RecordSpeed, 12));
    profiles[MesgNumRecord]->getField(RecordCompressedSpeedDistance)->addComponent(new CFitComponentfieldProfile("compressed_speed_distance", &ByteType, RecordCompressedSpeedDistance, 16, 0, "m", RecordDistance, 12));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("grade", &Sint16Type, RecordGrade, 100, 0, "%"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("resistance", &Uint8Type, RecordResistance, 0, 0, ""));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("time_from_course", &Sint32Type, RecordTimeFromCourse, 1000, 0, "s"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("cycle_length", &Uint8Type, RecordCycleLength, 100, 0, "m"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("temperature", &Sint8Type, RecordTemperature, 0, 0, "C"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("speed_1s", &Uint8Type, RecordSpeed1s, 16, 0, "m/s"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("cycles", &Uint8Type, RecordCycles, 0, 0, ""));
    profiles[MesgNumRecord]->getField(RecordCycles)->addComponent(new CFitComponentfieldProfile("cycles", &Uint8Type, RecordCycles, 0, 0, "cycles", RecordTotalCycles, 8));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("total_cycles", &Uint32Type, RecordTotalCycles, 0, 0, "cycles"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("compressed_accumulated_power", &Uint16Type, RecordCompressedAccumulatedPower, 0, 0, ""));
    profiles[MesgNumRecord]->getField(RecordCompressedAccumulatedPower)->addComponent(new CFitComponentfieldProfile("compressed_accumulated_power", &Uint16Type, RecordCompressedAccumulatedPower, 0, 0, "watts", RecordAccumulatedPower, 16));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("accumulated_power", &Uint32Type, RecordAccumulatedPower, 0, 0, "watts"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("left_right_balance", &EnumType, RecordLeftRightBalance, 0, 0, ""));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("gps_accuracy", &Uint8Type, RecordGpsAccuracy, 0, 0, "m"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("vertical_speed", &Sint16Type, RecordVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("calories", &Uint16Type, RecordCalories, 0, 0, "kcal"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("vertical_oscillation", &Uint16Type, RecordVerticalOscillation, 10, 0, "mm"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("stance_time_percent", &Uint16Type, RecordStanceTimePercent, 100, 0, "percent"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("stance_time", &Uint16Type, RecordStanceTime, 10, 0, "ms"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("activity_type", &EnumType, RecordActivityType, 0, 0, ""));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("left_torque_effectiveness", &Uint8Type, RecordLeftTorqueEffectiveness, 2, 0, "percent"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("right_torque_effectiveness", &Uint8Type, RecordRightTorqueEffectiveness, 2, 0, "percent"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("left_pedal_smoothness", &Uint8Type, RecordLeftPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("right_pedal_smoothness", &Uint8Type, RecordRightPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("combined_pedal_smoothness", &Uint8Type, RecordCombinedPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("time128", &Uint8Type, RecordTime128, 128, 0, "s"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("stroke_type", &EnumType, RecordStrokeType, 0, 0, ""));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("zone", &Uint8Type, RecordZone, 0, 0, ""));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("ball_speed", &Uint16Type, RecordBallSpeed, 100, 0, "m/s"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("cadence256", &Uint16Type, RecordCadence256, 256, 0, "rpm"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("fractional_cadence", &Uint8Type, RecordFractionalCadence, 128, 0, "rpm"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("total_hemoglobin_conc", &Uint16Type, RecordTotalHemoglobinConc, 100, 0, "g/dL"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("total_hemoglobin_conc_min", &Uint16Type, RecordTotalHemoglobinConcMin, 100, 0, "g/dL"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("total_hemoglobin_conc_max", &Uint16Type, RecordTotalHemoglobinConcMax, 100, 0, "g/dL"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("saturated_hemoglobin_percent", &Uint16Type, RecordSaturatedHemoglobinPercent, 10, 0, "%"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("saturated_hemoglobin_percent_min", &Uint16Type, RecordSaturatedHemoglobinPercentMin, 10, 0, "%"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("saturated_hemoglobin_percent_max", &Uint16Type, RecordSaturatedHemoglobinPercentMax, 10, 0, "%"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("device_index", &EnumType, RecordDeviceIndex, 0, 0, ""));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("left_pco", &Sint8Type, RecordLeftPco, 0, 0, "mm"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("right_pco", &Sint8Type, RecordRightPco, 0, 0, "mm"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("left_power_phase", &Uint8Type, RecordLeftPowerPhase, 0.7111111, 0, "degrees"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("left_power_phase_peak", &Uint8Type, RecordLeftPowerPhasePeak, 0.7111111, 0, "degrees"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("right_power_phase", &Uint8Type, RecordRightPowerPhase, 0.7111111, 0, "degrees"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("right_power_phase_peak", &Uint8Type, RecordRightPowerPhasePeak, 0.7111111, 0, "degrees"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("enhanced_speed", &Uint32Type, RecordEnhancedSpeed, 1000, 0, "m/s"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("enhanced_altitude", &Uint32Type, RecordEnhancedAltitude, 5, 500, "m"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("battery_soc", &Uint8Type, RecordBatterySoc, 2, 0, "percent"));
    profiles[MesgNumRecord]->addField(new CFitFieldProfile("motor_power", &Uint16Type, RecordMotorPower, 0, 0, "watts"));

    profiles[MesgNumEvent] = new CFitProfile("event", MesgNumEvent);
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("timestamp", &EnumType, EventTimestamp, 0, 0, "s"));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("event", &EnumType, EventEvent, 0, 0, ""));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("event_type", &EnumType, EventEventType, 0, 0, ""));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("data16", &Uint16Type, EventData16, 0, 0, ""));
    profiles[MesgNumEvent]->getField(EventData16)->addComponent(new CFitComponentfieldProfile("data16", &Uint16Type, EventData16, 0, 0, "", EventData, 16));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("data", &Uint32Type, EventData, 0, 0, ""));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("timer_trigger", &EnumType, EventData, 0, 0, "", EventEvent, EventTimer));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("course_point_index", &EnumType, EventData, 0, 0, "", EventEvent, EventCoursePoint));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("battery_level", &Uint16Type, EventData, 1000, 0, "V", EventEvent, EventBattery));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("virtual_partner_speed", &Uint16Type, EventData, 1000, 0, "m/s", EventEvent, EventVirtualPartnerPace));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("hr_high_alert", &Uint8Type, EventData, 0, 0, "bpm", EventEvent, EventHrHighAlert));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("hr_low_alert", &Uint8Type, EventData, 0, 0, "bpm", EventEvent, EventHrLowAlert));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("speed_high_alert", &Uint32Type, EventData, 1000, 0, "m/s", EventEvent, EventSpeedHighAlert));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("speed_low_alert", &Uint32Type, EventData, 1000, 0, "m/s", EventEvent, EventSpeedLowAlert));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("cad_high_alert", &Uint16Type, EventData, 0, 0, "rpm", EventEvent, EventCadHighAlert));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("cad_low_alert", &Uint16Type, EventData, 0, 0, "rpm", EventEvent, EventCadLowAlert));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("power_high_alert", &Uint16Type, EventData, 0, 0, "watts", EventEvent, EventPowerHighAlert));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("power_low_alert", &Uint16Type, EventData, 0, 0, "watts", EventEvent, EventPowerLowAlert));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("time_duration_alert", &Uint32Type, EventData, 1000, 0, "s", EventEvent, EventTimeDurationAlert));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("distance_duration_alert", &Uint32Type, EventData, 100, 0, "m", EventEvent, EventDistanceDurationAlert));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("calorie_duration_alert", &Uint32Type, EventData, 0, 0, "calories", EventEvent, EventCalorieDurationAlert));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("fitness_equipment_state", &EnumType, EventData, 0, 0, "", EventEvent, EventFitnessEquipment));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("sport_point", &Uint32Type, EventData, 0, 0, "", EventEvent, EventSportPoint));
    profiles[MesgNumEvent]->getField(EventData)->getSubfieldByIndex(16)->addComponent(new CFitComponentfieldProfile("sport_point", &Uint32Type, EventData, 1, 0, "", EventScore, 16));
    profiles[MesgNumEvent]->getField(EventData)->getSubfieldByIndex(16)->addComponent(new CFitComponentfieldProfile("sport_point", &Uint32Type, EventData, 1, 0, "", EventOpponentScore, 16));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("gear_change_data", &Uint32Type, EventData, 0, 0, "", EventEvent, EventFrontGearChange));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("gear_change_data", &Uint32Type, EventData, 0, 0, "", EventEvent, EventRearGearChange));
    profiles[MesgNumEvent]->getField(EventData)->getSubfieldByIndex(18)->addComponent(new CFitComponentfieldProfile("gear_change_data", &Uint32Type, EventData, 1, 0, "", EventRearGearNum, 8));
    profiles[MesgNumEvent]->getField(EventData)->getSubfieldByIndex(18)->addComponent(new CFitComponentfieldProfile("gear_change_data", &Uint32Type, EventData, 1, 0, "", EventRearGear, 8));
    profiles[MesgNumEvent]->getField(EventData)->getSubfieldByIndex(18)->addComponent(new CFitComponentfieldProfile("gear_change_data", &Uint32Type, EventData, 1, 0, "", EventFrontGearNum, 8));
    profiles[MesgNumEvent]->getField(EventData)->getSubfieldByIndex(18)->addComponent(new CFitComponentfieldProfile("gear_change_data", &Uint32Type, EventData, 1, 0, "", EventFrontGear, 8));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("rider_position", &EnumType, EventData, 0, 0, "", EventEvent, EventRiderPositionChange));
    profiles[MesgNumEvent]->getField(EventData)->addSubfield(new CFitSubfieldProfile("comm_timeout", &EnumType, EventData, 0, 0, "", EventEvent, EventCommTimeout));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("event_group", &Uint8Type, EventEventGroup, 0, 0, ""));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("score", &Uint16Type, EventScore, 0, 0, ""));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("opponent_score", &Uint16Type, EventOpponentScore, 0, 0, ""));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("front_gear_num", &Uint8zType, EventFrontGearNum, 0, 0, ""));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("front_gear", &Uint8zType, EventFrontGear, 0, 0, ""));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("rear_gear_num", &Uint8zType, EventRearGearNum, 0, 0, ""));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("rear_gear", &Uint8zType, EventRearGear, 0, 0, ""));
    profiles[MesgNumEvent]->addField(new CFitFieldProfile("device_index", &EnumType, EventDeviceIndex, 0, 0, ""));

    profiles[MesgNumDeviceInfo] = new CFitProfile("device_info", MesgNumDeviceInfo);
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("timestamp", &EnumType, DeviceInfoTimestamp, 0, 0, "s"));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("device_index", &EnumType, DeviceInfoDeviceIndex, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("device_type", &Uint8Type, DeviceInfoDeviceType, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->getField(DeviceInfoDeviceType)->addSubfield(new CFitSubfieldProfile("antplus_device_type", &EnumType, DeviceInfoDeviceType, 0, 0, "", DeviceInfoSourceType, SourceTypeAntplus));
    profiles[MesgNumDeviceInfo]->getField(DeviceInfoDeviceType)->addSubfield(new CFitSubfieldProfile("ant_device_type", &Uint8Type, DeviceInfoDeviceType, 0, 0, "", DeviceInfoSourceType, SourceTypeAnt));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("manufacturer", &EnumType, DeviceInfoManufacturer, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("serial_number", &Uint32zType, DeviceInfoSerialNumber, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("product", &Uint16Type, DeviceInfoProduct, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->getField(DeviceInfoProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, DeviceInfoProduct, 0, 0, "", DeviceInfoManufacturer, ManufacturerGarmin));
    profiles[MesgNumDeviceInfo]->getField(DeviceInfoProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, DeviceInfoProduct, 0, 0, "", DeviceInfoManufacturer, ManufacturerDynastream));
    profiles[MesgNumDeviceInfo]->getField(DeviceInfoProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, DeviceInfoProduct, 0, 0, "", DeviceInfoManufacturer, ManufacturerDynastreamOem));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("software_version", &Uint16Type, DeviceInfoSoftwareVersion, 100, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("hardware_version", &Uint8Type, DeviceInfoHardwareVersion, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("cum_operating_time", &Uint32Type, DeviceInfoCumOperatingTime, 0, 0, "s"));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("battery_voltage", &Uint16Type, DeviceInfoBatteryVoltage, 256, 0, "V"));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("battery_status", &EnumType, DeviceInfoBatteryStatus, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("sensor_position", &EnumType, DeviceInfoSensorPosition, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("descriptor", &StringType, DeviceInfoDescriptor, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("ant_transmission_type", &Uint8zType, DeviceInfoAntTransmissionType, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("ant_device_number", &Uint16zType, DeviceInfoAntDeviceNumber, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("ant_network", &EnumType, DeviceInfoAntNetwork, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("source_type", &EnumType, DeviceInfoSourceType, 0, 0, ""));
    profiles[MesgNumDeviceInfo]->addField(new CFitFieldProfile("product_name", &StringType, DeviceInfoProductName, 0, 0, ""));

    profiles[MesgNumTrainingFile] = new CFitProfile("training_file", MesgNumTrainingFile);
    profiles[MesgNumTrainingFile]->addField(new CFitFieldProfile("timestamp", &EnumType, TrainingFileTimestamp, 0, 0, ""));
    profiles[MesgNumTrainingFile]->addField(new CFitFieldProfile("type", &EnumType, TrainingFileType, 0, 0, ""));
    profiles[MesgNumTrainingFile]->addField(new CFitFieldProfile("manufacturer", &EnumType, TrainingFileManufacturer, 0, 0, ""));
    profiles[MesgNumTrainingFile]->addField(new CFitFieldProfile("product", &Uint16Type, TrainingFileProduct, 0, 0, ""));
    profiles[MesgNumTrainingFile]->getField(TrainingFileProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, TrainingFileProduct, 0, 0, "", TrainingFileManufacturer, ManufacturerGarmin));
    profiles[MesgNumTrainingFile]->getField(TrainingFileProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, TrainingFileProduct, 0, 0, "", TrainingFileManufacturer, ManufacturerDynastream));
    profiles[MesgNumTrainingFile]->getField(TrainingFileProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, TrainingFileProduct, 0, 0, "", TrainingFileManufacturer, ManufacturerDynastreamOem));
    profiles[MesgNumTrainingFile]->addField(new CFitFieldProfile("serial_number", &Uint32zType, TrainingFileSerialNumber, 0, 0, ""));
    profiles[MesgNumTrainingFile]->addField(new CFitFieldProfile("time_created", &EnumType, TrainingFileTimeCreated, 0, 0, ""));

    profiles[MesgNumHrv] = new CFitProfile("hrv", MesgNumHrv);
    profiles[MesgNumHrv]->addField(new CFitFieldProfile("time", &Uint16Type, HrvTime, 1000, 0, "s"));

    profiles[MesgNumCameraEvent] = new CFitProfile("camera_event", MesgNumCameraEvent);
    profiles[MesgNumCameraEvent]->addField(new CFitFieldProfile("timestamp", &EnumType, CameraEventTimestamp, 0, 0, "s"));
    profiles[MesgNumCameraEvent]->addField(new CFitFieldProfile("timestamp_ms", &Uint16Type, CameraEventTimestampMs, 0, 0, "ms"));
    profiles[MesgNumCameraEvent]->addField(new CFitFieldProfile("camera_event_type", &EnumType, CameraEventCameraEventType, 0, 0, ""));
    profiles[MesgNumCameraEvent]->addField(new CFitFieldProfile("camera_file_uuid", &StringType, CameraEventCameraFileUuid, 0, 0, ""));
    profiles[MesgNumCameraEvent]->addField(new CFitFieldProfile("camera_orientation", &EnumType, CameraEventCameraOrientation, 0, 0, ""));

    profiles[MesgNumGyroscopeData] = new CFitProfile("gyroscope_data", MesgNumGyroscopeData);
    profiles[MesgNumGyroscopeData]->addField(new CFitFieldProfile("timestamp", &EnumType, GyroscopeDataTimestamp, 0, 0, "s"));
    profiles[MesgNumGyroscopeData]->addField(new CFitFieldProfile("timestamp_ms", &Uint16Type, GyroscopeDataTimestampMs, 0, 0, "ms"));
    profiles[MesgNumGyroscopeData]->addField(new CFitFieldProfile("sample_time_offset", &Uint16Type, GyroscopeDataSampleTimeOffset, 0, 0, "ms"));
    profiles[MesgNumGyroscopeData]->addField(new CFitFieldProfile("gyro_x", &Uint16Type, GyroscopeDataGyroX, 0, 0, "counts"));
    profiles[MesgNumGyroscopeData]->addField(new CFitFieldProfile("gyro_y", &Uint16Type, GyroscopeDataGyroY, 0, 0, "counts"));
    profiles[MesgNumGyroscopeData]->addField(new CFitFieldProfile("gyro_z", &Uint16Type, GyroscopeDataGyroZ, 0, 0, "counts"));
    profiles[MesgNumGyroscopeData]->addField(new CFitFieldProfile("calibrated_gyro_x", &Float32Type, GyroscopeDataCalibratedGyroX, 0, 0, "deg/s"));
    profiles[MesgNumGyroscopeData]->addField(new CFitFieldProfile("calibrated_gyro_y", &Float32Type, GyroscopeDataCalibratedGyroY, 0, 0, "deg/s"));
    profiles[MesgNumGyroscopeData]->addField(new CFitFieldProfile("calibrated_gyro_z", &Float32Type, GyroscopeDataCalibratedGyroZ, 0, 0, "deg/s"));

    profiles[MesgNumAccelerometerData] = new CFitProfile("accelerometer_data", MesgNumAccelerometerData);
    profiles[MesgNumAccelerometerData]->addField(new CFitFieldProfile("timestamp", &EnumType, AccelerometerDataTimestamp, 0, 0, "s"));
    profiles[MesgNumAccelerometerData]->addField(new CFitFieldProfile("timestamp_ms", &Uint16Type, AccelerometerDataTimestampMs, 0, 0, "ms"));
    profiles[MesgNumAccelerometerData]->addField(new CFitFieldProfile("sample_time_offset", &Uint16Type, AccelerometerDataSampleTimeOffset, 0, 0, "ms"));
    profiles[MesgNumAccelerometerData]->addField(new CFitFieldProfile("accel_x", &Uint16Type, AccelerometerDataAccelX, 0, 0, "counts"));
    profiles[MesgNumAccelerometerData]->addField(new CFitFieldProfile("accel_y", &Uint16Type, AccelerometerDataAccelY, 0, 0, "counts"));
    profiles[MesgNumAccelerometerData]->addField(new CFitFieldProfile("accel_z", &Uint16Type, AccelerometerDataAccelZ, 0, 0, "counts"));
    profiles[MesgNumAccelerometerData]->addField(new CFitFieldProfile("calibrated_accel_x", &Float32Type, AccelerometerDataCalibratedAccelX, 0, 0, "g"));
    profiles[MesgNumAccelerometerData]->addField(new CFitFieldProfile("calibrated_accel_y", &Float32Type, AccelerometerDataCalibratedAccelY, 0, 0, "g"));
    profiles[MesgNumAccelerometerData]->addField(new CFitFieldProfile("calibrated_accel_z", &Float32Type, AccelerometerDataCalibratedAccelZ, 0, 0, "g"));

    profiles[MesgNumThreeDSensorCalibration] = new CFitProfile("three_d_sensor_calibration", MesgNumThreeDSensorCalibration);
    profiles[MesgNumThreeDSensorCalibration]->addField(new CFitFieldProfile("timestamp", &EnumType, ThreeDSensorCalibrationTimestamp, 0, 0, "s"));
    profiles[MesgNumThreeDSensorCalibration]->addField(new CFitFieldProfile("sensor_type", &EnumType, ThreeDSensorCalibrationSensorType, 0, 0, ""));
    profiles[MesgNumThreeDSensorCalibration]->addField(new CFitFieldProfile("calibration_factor", &Uint32Type, ThreeDSensorCalibrationCalibrationFactor, 0, 0, ""));
    profiles[MesgNumThreeDSensorCalibration]->getField(ThreeDSensorCalibrationCalibrationFactor)->addSubfield(new CFitSubfieldProfile("accel_cal_factor", &Uint32Type, ThreeDSensorCalibrationCalibrationFactor, 0, 0, "g", ThreeDSensorCalibrationSensorType, SensorTypeAccelerometer));
    profiles[MesgNumThreeDSensorCalibration]->getField(ThreeDSensorCalibrationCalibrationFactor)->addSubfield(new CFitSubfieldProfile("gyro_cal_factor", &Uint32Type, ThreeDSensorCalibrationCalibrationFactor, 0, 0, "deg/s", ThreeDSensorCalibrationSensorType, SensorTypeGyroscope));
    profiles[MesgNumThreeDSensorCalibration]->addField(new CFitFieldProfile("calibration_divisor", &Uint32Type, ThreeDSensorCalibrationCalibrationDivisor, 0, 0, "counts"));
    profiles[MesgNumThreeDSensorCalibration]->addField(new CFitFieldProfile("level_shift", &Uint32Type, ThreeDSensorCalibrationLevelShift, 0, 0, ""));
    profiles[MesgNumThreeDSensorCalibration]->addField(new CFitFieldProfile("offset_cal", &Sint32Type, ThreeDSensorCalibrationOffsetCal, 0, 0, ""));
    profiles[MesgNumThreeDSensorCalibration]->addField(new CFitFieldProfile("orientation_matrix", &Sint32Type, ThreeDSensorCalibrationOrientationMatrix, 65535, 0, ""));

    profiles[MesgNumVideoFrame] = new CFitProfile("video_frame", MesgNumVideoFrame);
    profiles[MesgNumVideoFrame]->addField(new CFitFieldProfile("timestamp", &EnumType, VideoFrameTimestamp, 0, 0, "s"));
    profiles[MesgNumVideoFrame]->addField(new CFitFieldProfile("timestamp_ms", &Uint16Type, VideoFrameTimestampMs, 0, 0, "ms"));
    profiles[MesgNumVideoFrame]->addField(new CFitFieldProfile("frame_number", &Uint32Type, VideoFrameFrameNumber, 0, 0, ""));

    profiles[MesgNumObdiiData] = new CFitProfile("obdii_data", MesgNumObdiiData);
    profiles[MesgNumObdiiData]->addField(new CFitFieldProfile("timestamp", &EnumType, ObdiiDataTimestamp, 0, 0, "s"));
    profiles[MesgNumObdiiData]->addField(new CFitFieldProfile("timestamp_ms", &Uint16Type, ObdiiDataTimestampMs, 0, 0, "ms"));
    profiles[MesgNumObdiiData]->addField(new CFitFieldProfile("time_offset", &Uint16Type, ObdiiDataTimeOffset, 0, 0, "ms"));
    profiles[MesgNumObdiiData]->addField(new CFitFieldProfile("pid", &ByteType, ObdiiDataPid, 0, 0, ""));
    profiles[MesgNumObdiiData]->addField(new CFitFieldProfile("raw_data", &ByteType, ObdiiDataRawData, 0, 0, ""));
    profiles[MesgNumObdiiData]->addField(new CFitFieldProfile("pid_data_size", &Uint8Type, ObdiiDataPidDataSize, 0, 0, ""));
    profiles[MesgNumObdiiData]->addField(new CFitFieldProfile("system_time", &Uint32Type, ObdiiDataSystemTime, 0, 0, ""));
    profiles[MesgNumObdiiData]->addField(new CFitFieldProfile("start_timestamp", &EnumType, ObdiiDataStartTimestamp, 0, 0, ""));
    profiles[MesgNumObdiiData]->addField(new CFitFieldProfile("start_timestamp_ms", &Uint16Type, ObdiiDataStartTimestampMs, 0, 0, "ms"));

    profiles[MesgNumNmeaSentence] = new CFitProfile("nmea_sentence", MesgNumNmeaSentence);
    profiles[MesgNumNmeaSentence]->addField(new CFitFieldProfile("timestamp", &EnumType, NmeaSentenceTimestamp, 0, 0, "s"));
    profiles[MesgNumNmeaSentence]->addField(new CFitFieldProfile("timestamp_ms", &Uint16Type, NmeaSentenceTimestampMs, 0, 0, "ms"));
    profiles[MesgNumNmeaSentence]->addField(new CFitFieldProfile("sentence", &StringType, NmeaSentenceSentence, 0, 0, ""));

    profiles[MesgNumAviationAttitude] = new CFitProfile("aviation_attitude", MesgNumAviationAttitude);
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("timestamp", &EnumType, AviationAttitudeTimestamp, 0, 0, "s"));
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("timestamp_ms", &Uint16Type, AviationAttitudeTimestampMs, 0, 0, "ms"));
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("system_time", &Uint32Type, AviationAttitudeSystemTime, 0, 0, "ms"));
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("pitch", &Sint16Type, AviationAttitudePitch, 10430.38, 0, "radians"));
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("roll", &Sint16Type, AviationAttitudeRoll, 10430.38, 0, "radians"));
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("accel_lateral", &Sint16Type, AviationAttitudeAccelLateral, 100, 0, "m/s^2"));
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("accel_normal", &Sint16Type, AviationAttitudeAccelNormal, 100, 0, "m/s^2"));
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("turn_rate", &Sint16Type, AviationAttitudeTurnRate, 1024, 0, "radians/second"));
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("stage", &EnumType, AviationAttitudeStage, 0, 0, ""));
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("attitude_stage_complete", &Uint8Type, AviationAttitudeAttitudeStageComplete, 0, 0, "%"));
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("track", &Uint16Type, AviationAttitudeTrack, 10430.38, 0, "radians"));
    profiles[MesgNumAviationAttitude]->addField(new CFitFieldProfile("validity", &EnumType, AviationAttitudeValidity, 0, 0, ""));

    profiles[MesgNumVideo] = new CFitProfile("video", MesgNumVideo);
    profiles[MesgNumVideo]->addField(new CFitFieldProfile("url", &StringType, VideoUrl, 0, 0, ""));
    profiles[MesgNumVideo]->addField(new CFitFieldProfile("hosting_provider", &StringType, VideoHostingProvider, 0, 0, ""));
    profiles[MesgNumVideo]->addField(new CFitFieldProfile("duration", &Uint32Type, VideoDuration, 0, 0, "ms"));

    profiles[MesgNumVideoTitle] = new CFitProfile("video_title", MesgNumVideoTitle);
    profiles[MesgNumVideoTitle]->addField(new CFitFieldProfile("message_index", &EnumType, VideoTitleMessageIndex, 0, 0, ""));
    profiles[MesgNumVideoTitle]->addField(new CFitFieldProfile("message_count", &Uint16Type, VideoTitleMessageCount, 0, 0, ""));
    profiles[MesgNumVideoTitle]->addField(new CFitFieldProfile("text", &StringType, VideoTitleText, 0, 0, ""));

    profiles[MesgNumVideoDescription] = new CFitProfile("video_description", MesgNumVideoDescription);
    profiles[MesgNumVideoDescription]->addField(new CFitFieldProfile("message_index", &EnumType, VideoDescriptionMessageIndex, 0, 0, ""));
    profiles[MesgNumVideoDescription]->addField(new CFitFieldProfile("message_count", &Uint16Type, VideoDescriptionMessageCount, 0, 0, ""));
    profiles[MesgNumVideoDescription]->addField(new CFitFieldProfile("text", &StringType, VideoDescriptionText, 0, 0, ""));

    profiles[MesgNumVideoClip] = new CFitProfile("video_clip", MesgNumVideoClip);
    profiles[MesgNumVideoClip]->addField(new CFitFieldProfile("clip_number", &Uint16Type, VideoClipClipNumber, 0, 0, ""));
    profiles[MesgNumVideoClip]->addField(new CFitFieldProfile("start_timestamp", &EnumType, VideoClipStartTimestamp, 0, 0, ""));
    profiles[MesgNumVideoClip]->addField(new CFitFieldProfile("start_timestamp_ms", &Uint16Type, VideoClipStartTimestampMs, 0, 0, ""));
    profiles[MesgNumVideoClip]->addField(new CFitFieldProfile("end_timestamp", &EnumType, VideoClipEndTimestamp, 0, 0, ""));
    profiles[MesgNumVideoClip]->addField(new CFitFieldProfile("end_timestamp_ms", &Uint16Type, VideoClipEndTimestampMs, 0, 0, ""));
    profiles[MesgNumVideoClip]->addField(new CFitFieldProfile("clip_start", &Uint32Type, VideoClipClipStart, 0, 0, "ms"));
    profiles[MesgNumVideoClip]->addField(new CFitFieldProfile("clip_end", &Uint32Type, VideoClipClipEnd, 0, 0, "ms"));

    profiles[MesgNumCourse] = new CFitProfile("course", MesgNumCourse);
    profiles[MesgNumCourse]->addField(new CFitFieldProfile("sport", &EnumType, CourseSport, 0, 0, ""));
    profiles[MesgNumCourse]->addField(new CFitFieldProfile("name", &StringType, CourseName, 0, 0, ""));
    profiles[MesgNumCourse]->addField(new CFitFieldProfile("capabilities", &EnumType, CourseCapabilities, 0, 0, ""));

    profiles[MesgNumCoursePoint] = new CFitProfile("course_point", MesgNumCoursePoint);
    profiles[MesgNumCoursePoint]->addField(new CFitFieldProfile("message_index", &EnumType, CoursePointMessageIndex, 0, 0, ""));
    profiles[MesgNumCoursePoint]->addField(new CFitFieldProfile("timestamp", &EnumType, CoursePointTimestamp, 0, 0, ""));
    profiles[MesgNumCoursePoint]->addField(new CFitFieldProfile("position_lat", &Sint32Type, CoursePointPositionLat, 0, 0, "semicircles"));
    profiles[MesgNumCoursePoint]->addField(new CFitFieldProfile("position_long", &Sint32Type, CoursePointPositionLong, 0, 0, "semicircles"));
    profiles[MesgNumCoursePoint]->addField(new CFitFieldProfile("distance", &Uint32Type, CoursePointDistance, 100, 0, "m"));
    profiles[MesgNumCoursePoint]->addField(new CFitFieldProfile("type", &EnumType, CoursePointType, 0, 0, ""));
    profiles[MesgNumCoursePoint]->addField(new CFitFieldProfile("name", &StringType, CoursePointName, 0, 0, ""));
    profiles[MesgNumCoursePoint]->addField(new CFitFieldProfile("favorite", &EnumType, CoursePointFavorite, 0, 0, ""));

    profiles[MesgNumSegmentId] = new CFitProfile("segment_id", MesgNumSegmentId);
    profiles[MesgNumSegmentId]->addField(new CFitFieldProfile("name", &StringType, SegmentIdName, 0, 0, ""));
    profiles[MesgNumSegmentId]->addField(new CFitFieldProfile("uuid", &StringType, SegmentIdUuid, 0, 0, ""));
    profiles[MesgNumSegmentId]->addField(new CFitFieldProfile("sport", &EnumType, SegmentIdSport, 0, 0, ""));
    profiles[MesgNumSegmentId]->addField(new CFitFieldProfile("enabled", &EnumType, SegmentIdEnabled, 0, 0, ""));
    profiles[MesgNumSegmentId]->addField(new CFitFieldProfile("user_profile_primary_key", &Uint32Type, SegmentIdUserProfilePrimaryKey, 0, 0, ""));
    profiles[MesgNumSegmentId]->addField(new CFitFieldProfile("device_id", &Uint32Type, SegmentIdDeviceId, 0, 0, ""));
    profiles[MesgNumSegmentId]->addField(new CFitFieldProfile("default_race_leader", &Uint8Type, SegmentIdDefaultRaceLeader, 0, 0, ""));
    profiles[MesgNumSegmentId]->addField(new CFitFieldProfile("delete_status", &EnumType, SegmentIdDeleteStatus, 0, 0, ""));
    profiles[MesgNumSegmentId]->addField(new CFitFieldProfile("selection_type", &EnumType, SegmentIdSelectionType, 0, 0, ""));

    profiles[MesgNumSegmentLeaderboardEntry] = new CFitProfile("segment_leaderboard_entry", MesgNumSegmentLeaderboardEntry);
    profiles[MesgNumSegmentLeaderboardEntry]->addField(new CFitFieldProfile("message_index", &EnumType, SegmentLeaderboardEntryMessageIndex, 0, 0, ""));
    profiles[MesgNumSegmentLeaderboardEntry]->addField(new CFitFieldProfile("name", &StringType, SegmentLeaderboardEntryName, 0, 0, ""));
    profiles[MesgNumSegmentLeaderboardEntry]->addField(new CFitFieldProfile("type", &EnumType, SegmentLeaderboardEntryType, 0, 0, ""));
    profiles[MesgNumSegmentLeaderboardEntry]->addField(new CFitFieldProfile("group_primary_key", &Uint32Type, SegmentLeaderboardEntryGroupPrimaryKey, 0, 0, ""));
    profiles[MesgNumSegmentLeaderboardEntry]->addField(new CFitFieldProfile("activity_id", &Uint32Type, SegmentLeaderboardEntryActivityId, 0, 0, ""));
    profiles[MesgNumSegmentLeaderboardEntry]->addField(new CFitFieldProfile("segment_time", &Uint32Type, SegmentLeaderboardEntrySegmentTime, 1000, 0, "s"));
    profiles[MesgNumSegmentLeaderboardEntry]->addField(new CFitFieldProfile("activity_id_string", &StringType, SegmentLeaderboardEntryActivityIdString, 0, 0, ""));

    profiles[MesgNumSegmentPoint] = new CFitProfile("segment_point", MesgNumSegmentPoint);
    profiles[MesgNumSegmentPoint]->addField(new CFitFieldProfile("message_index", &EnumType, SegmentPointMessageIndex, 0, 0, ""));
    profiles[MesgNumSegmentPoint]->addField(new CFitFieldProfile("position_lat", &Sint32Type, SegmentPointPositionLat, 0, 0, "semicircles"));
    profiles[MesgNumSegmentPoint]->addField(new CFitFieldProfile("position_long", &Sint32Type, SegmentPointPositionLong, 0, 0, "semicircles"));
    profiles[MesgNumSegmentPoint]->addField(new CFitFieldProfile("distance", &Uint32Type, SegmentPointDistance, 100, 0, "m"));
    profiles[MesgNumSegmentPoint]->addField(new CFitFieldProfile("altitude", &Uint16Type, SegmentPointAltitude, 5, 500, "m"));
    profiles[MesgNumSegmentPoint]->addField(new CFitFieldProfile("leader_time", &Uint32Type, SegmentPointLeaderTime, 1000, 0, "s"));

    profiles[MesgNumSegmentLap] = new CFitProfile("segment_lap", MesgNumSegmentLap);
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("message_index", &EnumType, SegmentLapMessageIndex, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("timestamp", &EnumType, SegmentLapTimestamp, 0, 0, "s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("event", &EnumType, SegmentLapEvent, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("event_type", &EnumType, SegmentLapEventType, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("start_time", &EnumType, SegmentLapStartTime, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("start_position_lat", &Sint32Type, SegmentLapStartPositionLat, 0, 0, "semicircles"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("start_position_long", &Sint32Type, SegmentLapStartPositionLong, 0, 0, "semicircles"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("end_position_lat", &Sint32Type, SegmentLapEndPositionLat, 0, 0, "semicircles"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("end_position_long", &Sint32Type, SegmentLapEndPositionLong, 0, 0, "semicircles"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("total_elapsed_time", &Uint32Type, SegmentLapTotalElapsedTime, 1000, 0, "s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("total_timer_time", &Uint32Type, SegmentLapTotalTimerTime, 1000, 0, "s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("total_distance", &Uint32Type, SegmentLapTotalDistance, 100, 0, "m"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("total_cycles", &Uint32Type, SegmentLapTotalCycles, 0, 0, "cycles"));
    profiles[MesgNumSegmentLap]->getField(SegmentLapTotalCycles)->addSubfield(new CFitSubfieldProfile("total_strokes", &Uint32Type, SegmentLapTotalCycles, 0, 0, "strokes", SegmentLapSport, SportCycling));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("total_calories", &Uint16Type, SegmentLapTotalCalories, 0, 0, "kcal"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("total_fat_calories", &Uint16Type, SegmentLapTotalFatCalories, 0, 0, "kcal"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_speed", &Uint16Type, SegmentLapAvgSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_speed", &Uint16Type, SegmentLapMaxSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_heart_rate", &Uint8Type, SegmentLapAvgHeartRate, 0, 0, "bpm"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_heart_rate", &Uint8Type, SegmentLapMaxHeartRate, 0, 0, "bpm"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_cadence", &Uint8Type, SegmentLapAvgCadence, 0, 0, "rpm"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_cadence", &Uint8Type, SegmentLapMaxCadence, 0, 0, "rpm"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_power", &Uint16Type, SegmentLapAvgPower, 0, 0, "watts"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_power", &Uint16Type, SegmentLapMaxPower, 0, 0, "watts"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("total_ascent", &Uint16Type, SegmentLapTotalAscent, 0, 0, "m"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("total_descent", &Uint16Type, SegmentLapTotalDescent, 0, 0, "m"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("sport", &EnumType, SegmentLapSport, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("event_group", &Uint8Type, SegmentLapEventGroup, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("nec_lat", &Sint32Type, SegmentLapNecLat, 0, 0, "semicircles"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("nec_long", &Sint32Type, SegmentLapNecLong, 0, 0, "semicircles"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("swc_lat", &Sint32Type, SegmentLapSwcLat, 0, 0, "semicircles"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("swc_long", &Sint32Type, SegmentLapSwcLong, 0, 0, "semicircles"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("name", &StringType, SegmentLapName, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("normalized_power", &Uint16Type, SegmentLapNormalizedPower, 0, 0, "watts"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("left_right_balance", &EnumType, SegmentLapLeftRightBalance, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("sub_sport", &EnumType, SegmentLapSubSport, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("total_work", &Uint32Type, SegmentLapTotalWork, 0, 0, "J"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_altitude", &Uint16Type, SegmentLapAvgAltitude, 5, 500, "m"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_altitude", &Uint16Type, SegmentLapMaxAltitude, 5, 500, "m"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("gps_accuracy", &Uint8Type, SegmentLapGpsAccuracy, 0, 0, "m"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_grade", &Sint16Type, SegmentLapAvgGrade, 100, 0, "%"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_pos_grade", &Sint16Type, SegmentLapAvgPosGrade, 100, 0, "%"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_neg_grade", &Sint16Type, SegmentLapAvgNegGrade, 100, 0, "%"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_pos_grade", &Sint16Type, SegmentLapMaxPosGrade, 100, 0, "%"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_neg_grade", &Sint16Type, SegmentLapMaxNegGrade, 100, 0, "%"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_temperature", &Sint8Type, SegmentLapAvgTemperature, 0, 0, "C"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_temperature", &Sint8Type, SegmentLapMaxTemperature, 0, 0, "C"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("total_moving_time", &Uint32Type, SegmentLapTotalMovingTime, 1000, 0, "s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_pos_vertical_speed", &Sint16Type, SegmentLapAvgPosVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_neg_vertical_speed", &Sint16Type, SegmentLapAvgNegVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_pos_vertical_speed", &Sint16Type, SegmentLapMaxPosVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_neg_vertical_speed", &Sint16Type, SegmentLapMaxNegVerticalSpeed, 1000, 0, "m/s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("time_in_hr_zone", &Uint32Type, SegmentLapTimeInHrZone, 1000, 0, "s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("time_in_speed_zone", &Uint32Type, SegmentLapTimeInSpeedZone, 1000, 0, "s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("time_in_cadence_zone", &Uint32Type, SegmentLapTimeInCadenceZone, 1000, 0, "s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("time_in_power_zone", &Uint32Type, SegmentLapTimeInPowerZone, 1000, 0, "s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("repetition_num", &Uint16Type, SegmentLapRepetitionNum, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("min_altitude", &Uint16Type, SegmentLapMinAltitude, 5, 500, "m"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("min_heart_rate", &Uint8Type, SegmentLapMinHeartRate, 0, 0, "bpm"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("active_time", &Uint32Type, SegmentLapActiveTime, 1000, 0, "s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("wkt_step_index", &EnumType, SegmentLapWktStepIndex, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("sport_event", &EnumType, SegmentLapSportEvent, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_left_torque_effectiveness", &Uint8Type, SegmentLapAvgLeftTorqueEffectiveness, 2, 0, "percent"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_right_torque_effectiveness", &Uint8Type, SegmentLapAvgRightTorqueEffectiveness, 2, 0, "percent"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_left_pedal_smoothness", &Uint8Type, SegmentLapAvgLeftPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_right_pedal_smoothness", &Uint8Type, SegmentLapAvgRightPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_combined_pedal_smoothness", &Uint8Type, SegmentLapAvgCombinedPedalSmoothness, 2, 0, "percent"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("status", &EnumType, SegmentLapStatus, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("uuid", &StringType, SegmentLapUuid, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_fractional_cadence", &Uint8Type, SegmentLapAvgFractionalCadence, 128, 0, "rpm"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_fractional_cadence", &Uint8Type, SegmentLapMaxFractionalCadence, 128, 0, "rpm"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("total_fractional_cycles", &Uint8Type, SegmentLapTotalFractionalCycles, 128, 0, "cycles"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("front_gear_shift_count", &Uint16Type, SegmentLapFrontGearShiftCount, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("rear_gear_shift_count", &Uint16Type, SegmentLapRearGearShiftCount, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("time_standing", &Uint32Type, SegmentLapTimeStanding, 1000, 0, "s"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("stand_count", &Uint16Type, SegmentLapStandCount, 0, 0, ""));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_left_pco", &Sint8Type, SegmentLapAvgLeftPco, 0, 0, "mm"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_right_pco", &Sint8Type, SegmentLapAvgRightPco, 0, 0, "mm"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_left_power_phase", &Uint8Type, SegmentLapAvgLeftPowerPhase, 0.7111111, 0, "degrees"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_left_power_phase_peak", &Uint8Type, SegmentLapAvgLeftPowerPhasePeak, 0.7111111, 0, "degrees"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_right_power_phase", &Uint8Type, SegmentLapAvgRightPowerPhase, 0.7111111, 0, "degrees"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_right_power_phase_peak", &Uint8Type, SegmentLapAvgRightPowerPhasePeak, 0.7111111, 0, "degrees"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_power_position", &Uint16Type, SegmentLapAvgPowerPosition, 0, 0, "watts"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_power_position", &Uint16Type, SegmentLapMaxPowerPosition, 0, 0, "watts"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("avg_cadence_position", &Uint8Type, SegmentLapAvgCadencePosition, 0, 0, "rpm"));
    profiles[MesgNumSegmentLap]->addField(new CFitFieldProfile("max_cadence_position", &Uint8Type, SegmentLapMaxCadencePosition, 0, 0, "rpm"));

    profiles[MesgNumSegmentFile] = new CFitProfile("segment_file", MesgNumSegmentFile);
    profiles[MesgNumSegmentFile]->addField(new CFitFieldProfile("message_index", &EnumType, SegmentFileMessageIndex, 0, 0, ""));
    profiles[MesgNumSegmentFile]->addField(new CFitFieldProfile("file_uuid", &StringType, SegmentFileFileUuid, 0, 0, ""));
    profiles[MesgNumSegmentFile]->addField(new CFitFieldProfile("enabled", &EnumType, SegmentFileEnabled, 0, 0, ""));
    profiles[MesgNumSegmentFile]->addField(new CFitFieldProfile("user_profile_primary_key", &Uint32Type, SegmentFileUserProfilePrimaryKey, 0, 0, ""));
    profiles[MesgNumSegmentFile]->addField(new CFitFieldProfile("leader_type", &EnumType, SegmentFileLeaderType, 0, 0, ""));
    profiles[MesgNumSegmentFile]->addField(new CFitFieldProfile("leader_group_primary_key", &Uint32Type, SegmentFileLeaderGroupPrimaryKey, 0, 0, ""));
    profiles[MesgNumSegmentFile]->addField(new CFitFieldProfile("leader_activity_id", &Uint32Type, SegmentFileLeaderActivityId, 0, 0, ""));
    profiles[MesgNumSegmentFile]->addField(new CFitFieldProfile("leader_activity_id_string", &StringType, SegmentFileLeaderActivityIdString, 0, 0, ""));

    profiles[MesgNumWorkout] = new CFitProfile("workout", MesgNumWorkout);
    profiles[MesgNumWorkout]->addField(new CFitFieldProfile("sport", &EnumType, WorkoutSport, 0, 0, ""));
    profiles[MesgNumWorkout]->addField(new CFitFieldProfile("capabilities", &EnumType, WorkoutCapabilities, 0, 0, ""));
    profiles[MesgNumWorkout]->addField(new CFitFieldProfile("num_valid_steps", &Uint16Type, WorkoutNumValidSteps, 0, 0, ""));
    profiles[MesgNumWorkout]->addField(new CFitFieldProfile("wkt_name", &StringType, WorkoutWktName, 0, 0, ""));

    profiles[MesgNumWorkoutStep] = new CFitProfile("workout_step", MesgNumWorkoutStep);
    profiles[MesgNumWorkoutStep]->addField(new CFitFieldProfile("message_index", &EnumType, WorkoutStepMessageIndex, 0, 0, ""));
    profiles[MesgNumWorkoutStep]->addField(new CFitFieldProfile("wkt_step_name", &StringType, WorkoutStepWktStepName, 0, 0, ""));
    profiles[MesgNumWorkoutStep]->addField(new CFitFieldProfile("duration_type", &EnumType, WorkoutStepDurationType, 0, 0, ""));
    profiles[MesgNumWorkoutStep]->addField(new CFitFieldProfile("duration_value", &Uint32Type, WorkoutStepDurationValue, 0, 0, ""));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_time", &Uint32Type, WorkoutStepDurationValue, 1000, 0, "s", WorkoutStepDurationType, WktStepDurationTime));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_time", &Uint32Type, WorkoutStepDurationValue, 0, 0, "", WorkoutStepDurationType, WktStepDurationRepetitionTime));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_distance", &Uint32Type, WorkoutStepDurationValue, 100, 0, "m", WorkoutStepDurationType, WktStepDurationDistance));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_hr", &EnumType, WorkoutStepDurationValue, 0, 0, "%", WorkoutStepDurationType, WktStepDurationHrLessThan));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_hr", &EnumType, WorkoutStepDurationValue, 0, 0, "or", WorkoutStepDurationType, WktStepDurationHrGreaterThan));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_calories", &Uint32Type, WorkoutStepDurationValue, 0, 0, "calories", WorkoutStepDurationType, WktStepDurationCalories));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_step", &Uint32Type, WorkoutStepDurationValue, 0, 0, "", WorkoutStepDurationType, WktStepDurationRepeatUntilStepsCmplt));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_step", &Uint32Type, WorkoutStepDurationValue, 0, 0, "", WorkoutStepDurationType, WktStepDurationRepeatUntilTime));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_step", &Uint32Type, WorkoutStepDurationValue, 0, 0, "", WorkoutStepDurationType, WktStepDurationRepeatUntilDistance));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_step", &Uint32Type, WorkoutStepDurationValue, 0, 0, "", WorkoutStepDurationType, WktStepDurationRepeatUntilCalories));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_step", &Uint32Type, WorkoutStepDurationValue, 0, 0, "", WorkoutStepDurationType, WktStepDurationRepeatUntilHrLessThan));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_step", &Uint32Type, WorkoutStepDurationValue, 0, 0, "", WorkoutStepDurationType, WktStepDurationRepeatUntilHrGreaterThan));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_step", &Uint32Type, WorkoutStepDurationValue, 0, 0, "", WorkoutStepDurationType, WktStepDurationRepeatUntilPowerLessThan));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_step", &Uint32Type, WorkoutStepDurationValue, 0, 0, "", WorkoutStepDurationType, WktStepDurationRepeatUntilPowerGreaterThan));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_power", &EnumType, WorkoutStepDurationValue, 0, 0, "%", WorkoutStepDurationType, WktStepDurationPowerLessThan));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepDurationValue)->addSubfield(new CFitSubfieldProfile("duration_power", &EnumType, WorkoutStepDurationValue, 0, 0, "or", WorkoutStepDurationType, WktStepDurationPowerGreaterThan));
    profiles[MesgNumWorkoutStep]->addField(new CFitFieldProfile("target_type", &EnumType, WorkoutStepTargetType, 0, 0, ""));
    profiles[MesgNumWorkoutStep]->addField(new CFitFieldProfile("target_value", &Uint32Type, WorkoutStepTargetValue, 0, 0, ""));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepTargetValue)->addSubfield(new CFitSubfieldProfile("target_hr_zone", &Uint32Type, WorkoutStepTargetValue, 0, 0, "", WorkoutStepTargetType, WktStepTargetHeartRate));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepTargetValue)->addSubfield(new CFitSubfieldProfile("target_power_zone", &Uint32Type, WorkoutStepTargetValue, 0, 0, "", WorkoutStepTargetType, WktStepTargetPower));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepTargetValue)->addSubfield(new CFitSubfieldProfile("repeat_steps", &Uint32Type, WorkoutStepTargetValue, 0, 0, "", WorkoutStepDurationType, WktStepDurationRepeatUntilStepsCmplt));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepTargetValue)->addSubfield(new CFitSubfieldProfile("repeat_time", &Uint32Type, WorkoutStepTargetValue, 1000, 0, "s", WorkoutStepDurationType, WktStepDurationRepeatUntilTime));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepTargetValue)->addSubfield(new CFitSubfieldProfile("repeat_distance", &Uint32Type, WorkoutStepTargetValue, 100, 0, "m", WorkoutStepDurationType, WktStepDurationRepeatUntilDistance));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepTargetValue)->addSubfield(new CFitSubfieldProfile("repeat_calories", &Uint32Type, WorkoutStepTargetValue, 0, 0, "calories", WorkoutStepDurationType, WktStepDurationRepeatUntilCalories));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepTargetValue)->addSubfield(new CFitSubfieldProfile("repeat_hr", &EnumType, WorkoutStepTargetValue, 0, 0, "%", WorkoutStepDurationType, WktStepDurationRepeatUntilHrLessThan));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepTargetValue)->addSubfield(new CFitSubfieldProfile("repeat_hr", &EnumType, WorkoutStepTargetValue, 0, 0, "or", WorkoutStepDurationType, WktStepDurationRepeatUntilHrGreaterThan));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepTargetValue)->addSubfield(new CFitSubfieldProfile("repeat_power", &EnumType, WorkoutStepTargetValue, 0, 0, "%", WorkoutStepDurationType, WktStepDurationRepeatUntilPowerLessThan));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepTargetValue)->addSubfield(new CFitSubfieldProfile("repeat_power", &EnumType, WorkoutStepTargetValue, 0, 0, "or", WorkoutStepDurationType, WktStepDurationRepeatUntilPowerGreaterThan));
    profiles[MesgNumWorkoutStep]->addField(new CFitFieldProfile("custom_target_value_low", &Uint32Type, WorkoutStepCustomTargetValueLow, 0, 0, ""));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepCustomTargetValueLow)->addSubfield(new CFitSubfieldProfile("custom_target_speed_low", &Uint32Type, WorkoutStepCustomTargetValueLow, 1000, 0, "m/s", WorkoutStepTargetType, WktStepTargetSpeed));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepCustomTargetValueLow)->addSubfield(new CFitSubfieldProfile("custom_target_heart_rate_low", &EnumType, WorkoutStepCustomTargetValueLow, 0, 0, "%", WorkoutStepTargetType, WktStepTargetHeartRate));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepCustomTargetValueLow)->addSubfield(new CFitSubfieldProfile("custom_target_cadence_low", &Uint32Type, WorkoutStepCustomTargetValueLow, 0, 0, "rpm", WorkoutStepTargetType, WktStepTargetCadence));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepCustomTargetValueLow)->addSubfield(new CFitSubfieldProfile("custom_target_power_low", &EnumType, WorkoutStepCustomTargetValueLow, 0, 0, "%", WorkoutStepTargetType, WktStepTargetPower));
    profiles[MesgNumWorkoutStep]->addField(new CFitFieldProfile("custom_target_value_high", &Uint32Type, WorkoutStepCustomTargetValueHigh, 0, 0, ""));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepCustomTargetValueHigh)->addSubfield(new CFitSubfieldProfile("custom_target_speed_high", &Uint32Type, WorkoutStepCustomTargetValueHigh, 1000, 0, "m/s", WorkoutStepTargetType, WktStepTargetSpeed));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepCustomTargetValueHigh)->addSubfield(new CFitSubfieldProfile("custom_target_heart_rate_high", &EnumType, WorkoutStepCustomTargetValueHigh, 0, 0, "%", WorkoutStepTargetType, WktStepTargetHeartRate));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepCustomTargetValueHigh)->addSubfield(new CFitSubfieldProfile("custom_target_cadence_high", &Uint32Type, WorkoutStepCustomTargetValueHigh, 0, 0, "rpm", WorkoutStepTargetType, WktStepTargetCadence));
    profiles[MesgNumWorkoutStep]->getField(WorkoutStepCustomTargetValueHigh)->addSubfield(new CFitSubfieldProfile("custom_target_power_high", &EnumType, WorkoutStepCustomTargetValueHigh, 0, 0, "%", WorkoutStepTargetType, WktStepTargetPower));
    profiles[MesgNumWorkoutStep]->addField(new CFitFieldProfile("intensity", &EnumType, WorkoutStepIntensity, 0, 0, ""));

    profiles[MesgNumSchedule] = new CFitProfile("schedule", MesgNumSchedule);
    profiles[MesgNumSchedule]->addField(new CFitFieldProfile("manufacturer", &EnumType, ScheduleManufacturer, 0, 0, ""));
    profiles[MesgNumSchedule]->addField(new CFitFieldProfile("product", &Uint16Type, ScheduleProduct, 0, 0, ""));
    profiles[MesgNumSchedule]->getField(ScheduleProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, ScheduleProduct, 0, 0, "", ScheduleManufacturer, ManufacturerGarmin));
    profiles[MesgNumSchedule]->getField(ScheduleProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, ScheduleProduct, 0, 0, "", ScheduleManufacturer, ManufacturerDynastream));
    profiles[MesgNumSchedule]->getField(ScheduleProduct)->addSubfield(new CFitSubfieldProfile("garmin_product", &EnumType, ScheduleProduct, 0, 0, "", ScheduleManufacturer, ManufacturerDynastreamOem));
    profiles[MesgNumSchedule]->addField(new CFitFieldProfile("serial_number", &Uint32zType, ScheduleSerialNumber, 0, 0, ""));
    profiles[MesgNumSchedule]->addField(new CFitFieldProfile("time_created", &EnumType, ScheduleTimeCreated, 0, 0, ""));
    profiles[MesgNumSchedule]->addField(new CFitFieldProfile("completed", &EnumType, ScheduleCompleted, 0, 0, ""));
    profiles[MesgNumSchedule]->addField(new CFitFieldProfile("type", &EnumType, ScheduleType, 0, 0, ""));
    profiles[MesgNumSchedule]->addField(new CFitFieldProfile("scheduled_time", &EnumType, ScheduleScheduledTime, 0, 0, ""));

    profiles[MesgNumTotals] = new CFitProfile("totals", MesgNumTotals);
    profiles[MesgNumTotals]->addField(new CFitFieldProfile("message_index", &EnumType, TotalsMessageIndex, 0, 0, ""));
    profiles[MesgNumTotals]->addField(new CFitFieldProfile("timestamp", &EnumType, TotalsTimestamp, 0, 0, "s"));
    profiles[MesgNumTotals]->addField(new CFitFieldProfile("timer_time", &Uint32Type, TotalsTimerTime, 0, 0, "s"));
    profiles[MesgNumTotals]->addField(new CFitFieldProfile("distance", &Uint32Type, TotalsDistance, 0, 0, "m"));
    profiles[MesgNumTotals]->addField(new CFitFieldProfile("calories", &Uint32Type, TotalsCalories, 0, 0, "kcal"));
    profiles[MesgNumTotals]->addField(new CFitFieldProfile("sport", &EnumType, TotalsSport, 0, 0, ""));
    profiles[MesgNumTotals]->addField(new CFitFieldProfile("elapsed_time", &Uint32Type, TotalsElapsedTime, 0, 0, "s"));
    profiles[MesgNumTotals]->addField(new CFitFieldProfile("sessions", &Uint16Type, TotalsSessions, 0, 0, ""));
    profiles[MesgNumTotals]->addField(new CFitFieldProfile("active_time", &Uint32Type, TotalsActiveTime, 0, 0, "s"));
    profiles[MesgNumTotals]->addField(new CFitFieldProfile("sport_index", &Uint8Type, TotalsSportIndex, 0, 0, ""));

    profiles[MesgNumWeightScale] = new CFitProfile("weight_scale", MesgNumWeightScale);
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("timestamp", &EnumType, WeightScaleTimestamp, 0, 0, "s"));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("weight", &EnumType, WeightScaleWeight, 100, 0, "kg"));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("percent_fat", &Uint16Type, WeightScalePercentFat, 100, 0, "%"));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("percent_hydration", &Uint16Type, WeightScalePercentHydration, 100, 0, "%"));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("visceral_fat_mass", &Uint16Type, WeightScaleVisceralFatMass, 100, 0, "kg"));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("bone_mass", &Uint16Type, WeightScaleBoneMass, 100, 0, "kg"));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("muscle_mass", &Uint16Type, WeightScaleMuscleMass, 100, 0, "kg"));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("basal_met", &Uint16Type, WeightScaleBasalMet, 4, 0, "kcal/day"));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("physique_rating", &Uint8Type, WeightScalePhysiqueRating, 0, 0, ""));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("active_met", &Uint16Type, WeightScaleActiveMet, 4, 0, "kcal/day"));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("metabolic_age", &Uint8Type, WeightScaleMetabolicAge, 0, 0, "years"));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("visceral_fat_rating", &Uint8Type, WeightScaleVisceralFatRating, 0, 0, ""));
    profiles[MesgNumWeightScale]->addField(new CFitFieldProfile("user_profile_index", &EnumType, WeightScaleUserProfileIndex, 0, 0, ""));

    profiles[MesgNumBloodPressure] = new CFitProfile("blood_pressure", MesgNumBloodPressure);
    profiles[MesgNumBloodPressure]->addField(new CFitFieldProfile("timestamp", &EnumType, BloodPressureTimestamp, 0, 0, "s"));
    profiles[MesgNumBloodPressure]->addField(new CFitFieldProfile("systolic_pressure", &Uint16Type, BloodPressureSystolicPressure, 0, 0, "mmHg"));
    profiles[MesgNumBloodPressure]->addField(new CFitFieldProfile("diastolic_pressure", &Uint16Type, BloodPressureDiastolicPressure, 0, 0, "mmHg"));
    profiles[MesgNumBloodPressure]->addField(new CFitFieldProfile("mean_arterial_pressure", &Uint16Type, BloodPressureMeanArterialPressure, 0, 0, "mmHg"));
    profiles[MesgNumBloodPressure]->addField(new CFitFieldProfile("map_3_sample_mean", &Uint16Type, BloodPressureMap3SampleMean, 0, 0, "mmHg"));
    profiles[MesgNumBloodPressure]->addField(new CFitFieldProfile("map_morning_values", &Uint16Type, BloodPressureMapMorningValues, 0, 0, "mmHg"));
    profiles[MesgNumBloodPressure]->addField(new CFitFieldProfile("map_evening_values", &Uint16Type, BloodPressureMapEveningValues, 0, 0, "mmHg"));
    profiles[MesgNumBloodPressure]->addField(new CFitFieldProfile("heart_rate", &Uint8Type, BloodPressureHeartRate, 0, 0, "bpm"));
    profiles[MesgNumBloodPressure]->addField(new CFitFieldProfile("heart_rate_type", &EnumType, BloodPressureHeartRateType, 0, 0, ""));
    profiles[MesgNumBloodPressure]->addField(new CFitFieldProfile("status", &EnumType, BloodPressureStatus, 0, 0, ""));
    profiles[MesgNumBloodPressure]->addField(new CFitFieldProfile("user_profile_index", &EnumType, BloodPressureUserProfileIndex, 0, 0, ""));

    profiles[MesgNumMonitoringInfo] = new CFitProfile("monitoring_info", MesgNumMonitoringInfo);
    profiles[MesgNumMonitoringInfo]->addField(new CFitFieldProfile("timestamp", &EnumType, MonitoringInfoTimestamp, 0, 0, "s"));
    profiles[MesgNumMonitoringInfo]->addField(new CFitFieldProfile("local_timestamp", &EnumType, MonitoringInfoLocalTimestamp, 0, 0, "s"));
    profiles[MesgNumMonitoringInfo]->addField(new CFitFieldProfile("activity_type", &EnumType, MonitoringInfoActivityType, 0, 0, ""));
    profiles[MesgNumMonitoringInfo]->addField(new CFitFieldProfile("cycles_to_distance", &Uint16Type, MonitoringInfoCyclesToDistance, 5000, 0, "m/cycle"));
    profiles[MesgNumMonitoringInfo]->addField(new CFitFieldProfile("cycles_to_calories", &Uint16Type, MonitoringInfoCyclesToCalories, 5000, 0, "kcal/cycle"));
    profiles[MesgNumMonitoringInfo]->addField(new CFitFieldProfile("resting_metabolic_rate", &Uint16Type, MonitoringInfoRestingMetabolicRate, 0, 0, "kcal / day"));

    profiles[MesgNumMonitoring] = new CFitProfile("monitoring", MesgNumMonitoring);
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("timestamp", &EnumType, MonitoringTimestamp, 0, 0, "s"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("device_index", &EnumType, MonitoringDeviceIndex, 0, 0, ""));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("calories", &Uint16Type, MonitoringCalories, 0, 0, "kcal"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("distance", &Uint32Type, MonitoringDistance, 100, 0, "m"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("cycles", &Uint32Type, MonitoringCycles, 2, 0, "cycles"));
    profiles[MesgNumMonitoring]->getField(MonitoringCycles)->addSubfield(new CFitSubfieldProfile("steps", &Uint32Type, MonitoringCycles, 1, 0, "steps", MonitoringActivityType, ActivityTypeWalking));
    profiles[MesgNumMonitoring]->getField(MonitoringCycles)->addSubfield(new CFitSubfieldProfile("steps", &Uint32Type, MonitoringCycles, 0, 0, "", MonitoringActivityType, ActivityTypeRunning));
    profiles[MesgNumMonitoring]->getField(MonitoringCycles)->addSubfield(new CFitSubfieldProfile("strokes", &Uint32Type, MonitoringCycles, 2, 0, "strokes", MonitoringActivityType, ActivityTypeCycling));
    profiles[MesgNumMonitoring]->getField(MonitoringCycles)->addSubfield(new CFitSubfieldProfile("strokes", &Uint32Type, MonitoringCycles, 0, 0, "", MonitoringActivityType, ActivityTypeSwimming));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("active_time", &Uint32Type, MonitoringActiveTime, 1000, 0, "s"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("activity_type", &EnumType, MonitoringActivityType, 0, 0, ""));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("activity_subtype", &EnumType, MonitoringActivitySubtype, 0, 0, ""));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("activity_level", &EnumType, MonitoringActivityLevel, 0, 0, ""));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("distance_16", &Uint16Type, MonitoringDistance16, 0, 0, "100 * m"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("cycles_16", &Uint16Type, MonitoringCycles16, 0, 0, "2 * cycles (steps)"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("active_time_16", &Uint16Type, MonitoringActiveTime16, 0, 0, "s"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("local_timestamp", &EnumType, MonitoringLocalTimestamp, 0, 0, ""));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("temperature", &Sint16Type, MonitoringTemperature, 100, 0, "C"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("temperature_min", &Sint16Type, MonitoringTemperatureMin, 100, 0, "C"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("temperature_max", &Sint16Type, MonitoringTemperatureMax, 100, 0, "C"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("activity_time", &Uint16Type, MonitoringActivityTime, 0, 0, "minutes"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("active_calories", &Uint16Type, MonitoringActiveCalories, 0, 0, "kcal"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("current_activity_type_intensity", &ByteType, MonitoringCurrentActivityTypeIntensity, 0, 0, ""));
    profiles[MesgNumMonitoring]->getField(MonitoringCurrentActivityTypeIntensity)->addComponent(new CFitComponentfieldProfile("current_activity_type_intensity", &ByteType, MonitoringCurrentActivityTypeIntensity, 0, 0, "", MonitoringActivityType, 5));
    profiles[MesgNumMonitoring]->getField(MonitoringCurrentActivityTypeIntensity)->addComponent(new CFitComponentfieldProfile("current_activity_type_intensity", &ByteType, MonitoringCurrentActivityTypeIntensity, 0, 0, "", MonitoringIntensity, 3));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("timestamp_min_8", &Uint8Type, MonitoringTimestampMin8, 0, 0, "min"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("timestamp_16", &Uint16Type, MonitoringTimestamp16, 0, 0, "s"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("heart_rate", &Uint8Type, MonitoringHeartRate, 0, 0, "bpm"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("intensity", &Uint8Type, MonitoringIntensity, 10, 0, ""));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("duration_min", &Uint16Type, MonitoringDurationMin, 0, 0, "min"));
    profiles[MesgNumMonitoring]->addField(new CFitFieldProfile("duration", &Uint32Type, MonitoringDuration, 0, 0, "s"));

    profiles[MesgNumMemoGlob] = new CFitProfile("memo_glob", MesgNumMemoGlob);
    profiles[MesgNumMemoGlob]->addField(new CFitFieldProfile("part_index", &Uint32Type, MemoGlobPartIndex, 0, 0, ""));
    profiles[MesgNumMemoGlob]->addField(new CFitFieldProfile("memo", &ByteType, MemoGlobMemo, 0, 0, ""));
    profiles[MesgNumMemoGlob]->addField(new CFitFieldProfile("message_number", &Uint16Type, MemoGlobMessageNumber, 0, 0, ""));
    profiles[MesgNumMemoGlob]->addField(new CFitFieldProfile("message_index", &EnumType, MemoGlobMessageIndex, 0, 0, ""));

// ----------- end generated code -----------

    profiles[GlobalMesgNrInvalid] = new CFitProfile();
    profiles[GlobalMesgNrInvalid]->addField(new CFitFieldProfile());
    return profiles;
}

QMap<uint16_t, CFitProfile*> allProfiles = initProfiles();


CFitProfile* CFitProfileLockup::getProfile(uint16_t globalMesgNr)
{
    if (allProfiles.contains(globalMesgNr))
    {
        return allProfiles[globalMesgNr];
    }
    return allProfiles[GlobalMesgNrInvalid];
}

CFitFieldProfile * CFitProfileLockup::getFieldForProfile(uint16_t globalMesgNr, uint8_t fieldDefNr)
{
    CFitFieldProfile* f = nullptr;
    if (allProfiles.contains(globalMesgNr)) {
        return  allProfiles[globalMesgNr]->getField(fieldDefNr);
    }
    return allProfiles[GlobalMesgNrInvalid]->getField(FieldDefNrInvalid);
}